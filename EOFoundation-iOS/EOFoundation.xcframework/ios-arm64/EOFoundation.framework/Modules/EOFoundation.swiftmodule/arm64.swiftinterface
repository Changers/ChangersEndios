// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name EOFoundation
import AVFoundation
import AVKit
import AppTrackingTransparency
import CoreData
import CoreLocation
@_exported import EOFoundation
import EventKit
import EventKitUI
import Foundation
import MapKit
import MessageUI
import PDFKit
import SafariServices
import Swift
import SystemConfiguration
import UIKit.UIGestureRecognizerSubclass
import UIKit
import UserNotifications
import WebKit
import _Concurrency
public typealias SwitchChangedCompletion = (Swift.Bool) -> Swift.Void
public typealias DateChangedCompletion = (Foundation.Date) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class PdfViewWidgetControllerType : EOFoundation.WidgetViewControllerType, UIKit.UIPopoverPresentationControllerDelegate, PDFKit.PDFViewDelegate, EOFoundation.ThumbnailGridViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) final public var widget: EOFoundation.WidgetModel?
  @_Concurrency.MainActor(unsafe) final public func setup(with widget: EOFoundation.WidgetModel)
  @_Concurrency.MainActor(unsafe) public static var implementationType: EOFoundation.ControllerImplementationType
  @_Concurrency.MainActor(unsafe) final public var pdfDocument: PDFKit.PDFDocument? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var pdfTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) final public var searchNavigationController: UIKit.UINavigationController?
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override final public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @_Concurrency.MainActor(unsafe) final public func thumbnailGridViewController(_ thumbnailGridViewController: EOFoundation.ThumbnailGridViewController, didSelectPage page: PDFKit.PDFPage)
  @_Concurrency.MainActor(unsafe) final public func reloadContainerViews()
  @_Concurrency.MainActor(unsafe) final public func loadPdfConfigurations()
  @_Concurrency.MainActor(unsafe) @objc final public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController) -> UIKit.UIModalPresentationStyle
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class E1PageControl : UIKit.UIPageControl {
  @_Concurrency.MainActor(unsafe) public var pagesNumber: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var hideForSinglePage: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var currentPage: Swift.Int {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
public protocol Cacheable {
  var cacheData: Foundation.Data? { get }
}
extension EOFoundation.Cacheable where Self : Swift.Decodable, Self : Swift.Encodable {
  public var cacheData: Foundation.Data? {
    get
  }
}
extension EOFoundation.Cacheable {
  public static var cacheFileName: Swift.String {
    get
  }
  public var cacheFileName: Swift.String {
    get
  }
}
public protocol CacheProtocol {
  func cache(_ object: EOFoundation.Cacheable)
  func cache(image imageData: Foundation.Data, urlString: Swift.String)
  func cache(pdf pdfData: Foundation.Data, urlString: Swift.String)
  func load<T>(_ cacheable: T.Type) -> T? where T : EOFoundation.Cacheable, T : Swift.Decodable
  func load<T>(_ cacheable: T.Type, ignoreCacheTimeout: Swift.Bool) -> T? where T : EOFoundation.Cacheable, T : Swift.Decodable
  func loadImage(for urlString: Swift.String) -> UIKit.UIImage?
  func loadPDF(for urlString: Swift.String) -> PDFKit.PDFDocument?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EOLabelTableViewCell : EOFoundation.EOTableViewCell {
  @objc deinit
}
extension EOFoundation.EOLabelTableViewCell {
  @_Concurrency.MainActor(unsafe) final public func fill(model: EOFoundation.EOLabelCellModel)
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func register<CellClass>(class classType: CellClass.Type) where CellClass : UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func register<CellClass>(nib: CellClass.Type) where CellClass : UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func dequeue<Cell>(cell: Cell.Type, for indexPath: Foundation.IndexPath) -> Cell where Cell : UIKit.UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class InfoViewBodyTextCell : EOFoundation.EOTableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
extension EOFoundation.InfoViewBodyTextCell {
  @_Concurrency.MainActor(unsafe) public func fill(model: EOFoundation.InfoViewBodyTextModel)
}
@objc @_Concurrency.MainActor(unsafe) open class AloeStackViewController : UIKit.UIViewController {
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public let stackView: EOFoundation.AloeStackView
  @_Concurrency.MainActor(unsafe) open var automaticallyFlashScrollIndicators: Swift.Bool
  @objc deinit
}
public enum HTTPCallErrorType<E> : Swift.Error {
  case urlError
  case dataError
  case statusError(Swift.Int, Foundation.Data?)
  case responseError(Swift.Error)
  case mappedError(E)
  case parsingError(Swift.Error)
}
public struct InfoViewHeaderModel {
  public init(title: Swift.String?)
}
public struct InfoViewImageModel {
  public init(image: EOFoundation.MediaContentType, accessibilityText: Swift.String?)
}
public struct InfoViewBodyTextModel {
  public init(text: Swift.String?)
}
@objc @_Concurrency.MainActor(unsafe) open class StackViewCell : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(contentView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) open var rowHighlightColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) open var rowBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var rowInset: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var separatorAxis: UIKit.NSLayoutConstraint.Axis {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var separatorColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var separatorWidth: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var separatorHeight: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var separatorInset: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isSeparatorHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let contentView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
extension EOFoundation.StackViewCell : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
public protocol ContentHubConfiguration : AnyObject {
  var name: Swift.String { get }
  var widgetID: Swift.Int { get }
  var pageToLoad: Swift.Int { get set }
  var numberOfItems: Swift.Int { get }
  var selectionParams: Swift.String { get }
}
extension EOFoundation.ContentHubConfiguration {
  public var query: [Swift.String : Swift.String] {
    get
  }
  public func nextPage()
  public func reset()
}
public struct StringUtils {
  public static func attributedTitledText(using title: Swift.String, description: Swift.String, titleStyle: EOFoundation.TextStyleType = .headline4, paragraphStyle: UIKit.NSMutableParagraphStyle = NSMutableParagraphStyle(), descriptionStyle: EOFoundation.TextStyleType = .body, separator: Swift.String = "\n") -> Foundation.NSMutableAttributedString
}
final public class EOSnackBarManager {
  public init(viewController: UIKit.UIViewController, model: EOFoundation.EOSnackBarModel, heightFromBottom: CoreGraphics.CGFloat = 86)
  final public func show()
  final public func replaceQueue(with model: EOFoundation.EOSnackBarModel)
  final public func addToQueue(with models: [EOFoundation.EOSnackBarModel])
  final public func remove()
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (EOFoundation.Reachability) -> ()
  public typealias NetworkUnreachable = (EOFoundation.Reachability) -> ()
  public enum Connection : Swift.String {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var whenReachable: EOFoundation.Reachability.NetworkReachable?
  public var whenUnreachable: EOFoundation.Reachability.NetworkUnreachable?
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  public var connection: EOFoundation.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension EOFoundation.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var description: Swift.String {
    get
  }
}
public protocol RssFeedObject : EOFoundation.NewsFeedModel {
  var title: Swift.String { get set }
  var description: Swift.String { get set }
  var pubDate: Swift.String { get set }
  var guid: Swift.String { get set }
  var imageUrl: Swift.String { get set }
}
public struct Theme {
  @available(*, deprecated, renamed: "appPaddingMultiplier")
  public static var buttonMultiplier: CoreGraphics.CGFloat {
    get
  }
  public static var style: EOFoundation.Style? {
    get
    set
  }
  public static func save(style: EOFoundation.Style)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TitledIconView : EOFoundation.EOView {
  @_Concurrency.MainActor(unsafe) final public let iconHolder: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: EOFoundation.EOHeadline4Label
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class IconLabel : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) final public let icon: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let label: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imageUrlString: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setStyle(_ styleType: EOFoundation.TextStyleType?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CenteredIconLabel : EOFoundation.IconLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
public class FilterCategory : Swift.Hashable {
  public static func == (lhs: EOFoundation.FilterCategory, rhs: EOFoundation.FilterCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  final public let name: Swift.String
  public var isSelected: Swift.Bool
  public var iconUrl: Swift.String
  public init(name: Swift.String, isSelected: Swift.Bool, iconUrl: Swift.String)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FilterBody : UIKit.UICollectionView, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) public var categories: [EOFoundation.FilterCategory]
  @_Concurrency.MainActor(unsafe) public var categoriesHeight: CoreGraphics.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public func showFilter(at index: Foundation.IndexPath, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc deinit
}
public protocol DateFilterProtocol {
  func didChose(date: Foundation.Date)
}
public protocol OGObjectProtocol {
  var title: Swift.String { get set }
  var type: Swift.String { get set }
  var image: Swift.String { get set }
  var url: Swift.String { get set }
}
public struct OGObject : EOFoundation.OGObjectProtocol {
  public var title: Swift.String
  public var type: Swift.String
  public var image: Swift.String
  public var url: Swift.String
  public init()
  public init(dict: [EOFoundation.OGMetadata : Swift.String])
}
public enum OGMetadata : Swift.String, Swift.CaseIterable {
  case title
  case type
  case image
  case url
  public init?(rawValue: Swift.String)
  public typealias AllCases = [EOFoundation.OGMetadata]
  public typealias RawValue = Swift.String
  public static var allCases: [EOFoundation.OGMetadata] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol OGProtocol : EOFoundation.OGParser {
  static func og(from url: Swift.String, completion: @escaping (EOFoundation.OGObject) -> Swift.Void)
}
public protocol OGParser {
  static func parse(_ html: Swift.String) -> [EOFoundation.OGMetadata : Swift.String]
}
extension EOFoundation.OGProtocol {
  public static func og(from url: Swift.String, completion: @escaping (EOFoundation.OGObject) -> Swift.Void)
}
extension EOFoundation.OGParser {
  public static func parse(_ html: Swift.String) -> [EOFoundation.OGMetadata : Swift.String]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class EOWebViewContoller : EOFoundation.WidgetViewControllerType {
  @_Concurrency.MainActor(unsafe) public static var implementationType: EOFoundation.ControllerImplementationType
  @_Concurrency.MainActor(unsafe) public var navigationType: EOFoundation.ControllerNavigationType
  @_Concurrency.MainActor(unsafe) public var widget: EOFoundation.WidgetModel?
  @_Concurrency.MainActor(unsafe) public var urlString: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) open func setup(with widget: EOFoundation.WidgetModel)
  @objc deinit
}
extension EOFoundation.EOWebViewContoller : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
extension EOFoundation.EOWebViewContoller : WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
extension EOFoundation.EOWebViewContoller {
  @_Concurrency.MainActor(unsafe) public static func create(with widgetModel: EOFoundation.WidgetModel) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) public static func create(with urlString: Swift.String, title: Swift.String? = nil) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) public static func create(with url: Foundation.URL, title: Swift.String? = nil) -> UIKit.UINavigationController
}
extension EOFoundation.Theme {
  public static var appPaddingMultiplier: CoreGraphics.CGFloat {
    get
  }
  public static var appPadding: CoreGraphics.CGFloat {
    get
  }
  public static var appCornerRadius: CoreGraphics.CGFloat {
    get
  }
  public static var primaryColor: UIKit.UIColor {
    get
  }
  public static var secondaryColor: UIKit.UIColor {
    get
  }
  public static var shadowColor: UIKit.UIColor {
    get
  }
  public static var tertiaryColor: UIKit.UIColor? {
    get
  }
  public static var borderWidth: CoreGraphics.CGFloat {
    get
  }
  public static var tileBackgroundColors: [UIKit.UIColor] {
    get
  }
  public static var backgroundColors: [UIKit.UIColor] {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class FilterSelectionCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var data: (title: Swift.String, icon: Swift.String)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isItSelected: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) open func selectionStyle()
  @_Concurrency.MainActor(unsafe) open func unselectionStyle()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIColor {
  @available(*, deprecated, renamed: "isDarkTheme")
  public func isDarkBackground() -> Swift.Bool
  public func isDarkTheme() -> Swift.Bool
}
precedencegroup PowerPrecedence {
  higherThan: MultiplicationPrecedence
}
infix operator ^^ : PowerPrecedence
public protocol ContentHubObjectProtocol : Swift.Decodable, Swift.Encodable {
  var additionalImages: [EOFoundation.AdditionalImage]? { get set }
  var socialMedia: [EOFoundation.SocialMediaModel]? { get set }
  var additionalMedia: [EOFoundation.MediaModel]? { get set }
  func filteredImages() -> [Swift.String]
  func getSocialContent() -> EOFoundation.ContentObject?
  func getGalleryContent() -> EOFoundation.ContentObject?
}
extension EOFoundation.ContentHubObjectProtocol {
  public func filteredImages() -> [Swift.String]
  public func getSocialContent() -> EOFoundation.ContentObject?
  public func getGalleryContent() -> EOFoundation.ContentObject?
}
public struct AdditionalImage : Swift.Codable {
  public let id: Swift.Int?
  public let image: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias WidgetCollectionCellType = EOFoundation.WidgetTileCell & EOFoundation.CellProtocol
public typealias WidgetViewControllerType = UIKit.UIViewController & EOFoundation.ControllerProtocol
public protocol WidgetPresentationProvider {
  var navigationType: EOFoundation.ControllerNavigationType { get }
  func viewController(using widget: EOFoundation.WidgetModel) -> UIKit.UIViewController?
}
extension EOFoundation.WidgetPresentationProvider {
  public var navigationType: EOFoundation.ControllerNavigationType {
    get
  }
  public func viewController(using widget: EOFoundation.WidgetModel) -> UIKit.UIViewController?
}
public struct Widget<U> {
  public let collectionViewCellType: U
  public let presentationProvider: EOFoundation.WidgetPresentationProvider
  public init(collectionViewCellType: U, presentationProvider: EOFoundation.WidgetPresentationProvider)
}
public typealias WidgetType = EOFoundation.Widget<EOFoundation.WidgetCollectionCellType.Type>
public typealias WidgetContainer = (type: Swift.String, widget: EOFoundation.WidgetType)
public typealias WidgetVariantView = UIKit.UIView & EOFoundation.WidgetProtocol
public typealias WidgetVariantCollectionCell = UIKit.UICollectionViewCell & EOFoundation.VariantProtocol
public protocol WidgetProtocol {
  var widget: EOFoundation.WidgetModel? { get set }
  func setup(with widget: EOFoundation.WidgetModel)
}
public protocol VariantProtocol : EOFoundation.WidgetProtocol {
  static var implementationType: EOFoundation.CellImplementationType { get set }
}
public protocol CellProtocol : EOFoundation.VariantProtocol {
  var isLoginRequired: Swift.Bool { get }
  func didCallFromLink(dict: [Swift.String : Any]?)
  func willBeDisplayed()
  func willBeHidden()
}
extension EOFoundation.CellProtocol {
  public func willBeDisplayed()
  public func willBeHidden()
  public func didCallFromLink(dict: [Swift.String : Any]?)
}
public protocol ControllerProtocol : EOFoundation.WidgetProtocol {
  static var implementationType: EOFoundation.ControllerImplementationType { get set }
}
public enum CellImplementationType {
  case programmatically
  case xib
  public static func == (a: EOFoundation.CellImplementationType, b: EOFoundation.CellImplementationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ControllerNavigationType {
  case modal
  case sheet
  case push
  public static func == (a: EOFoundation.ControllerNavigationType, b: EOFoundation.ControllerNavigationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ControllerImplementationType {
  case programmatically
  case storyboard(name: Swift.String, bundle: Foundation.Bundle?)
  case xib(name: Swift.String, bundle: Foundation.Bundle?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class WidgetTileCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var widget: EOFoundation.WidgetModel?
  @_Concurrency.MainActor(unsafe) final public let variantsCollectionView: EOFoundation.VariantsCollectionView
  @_Concurrency.MainActor(unsafe) open var isLoginRequired: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override required dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setup(tiles: [Swift.String : EOFoundation.WidgetVariantCollectionCell.Type] = [:], widget: EOFoundation.WidgetModel)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EODetailViewTextBox : EOFoundation.EOView, EOFoundation.EODetailViewBoxProtocol {
  @_Concurrency.MainActor(unsafe) public var hasBackground: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, description: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class InsetGroupedTableView : UIKit.UITableView {
  @objc dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NoLinesTableView : EOFoundation.InsetGroupedTableView {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class BasicTile : EOFoundation.WidgetVariantCollectionCell {
  @_Concurrency.MainActor(unsafe) public static var implementationType: EOFoundation.CellImplementationType
  @_Concurrency.MainActor(unsafe) final public var widget: EOFoundation.WidgetModel?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) final public func setup(with widget: EOFoundation.WidgetModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BasicImageTile : EOFoundation.WidgetVariantCollectionCell {
  @_Concurrency.MainActor(unsafe) public static var implementationType: EOFoundation.CellImplementationType
  @_Concurrency.MainActor(unsafe) public var widget: EOFoundation.WidgetModel?
  @_Concurrency.MainActor(unsafe) final public let title: EOFoundation.GradientTextView
  @_Concurrency.MainActor(unsafe) final public let image: EOFoundation.EOImageView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setup(with widget: EOFoundation.WidgetModel)
  @objc deinit
}
public struct EODetailViewInformationBoxModel {
  public init(items: [EOFoundation.IconTextModel], buttons: [EOFoundation.EOButton] = [])
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EODetailViewInformationBox : EOFoundation.EODetailViewSmallBoxType {
  @_Concurrency.MainActor(unsafe) public var minimalView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var hasBackground: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(model: EOFoundation.EODetailViewInformationBoxModel)
  @objc deinit
}
extension EOFoundation.EODetailViewInformationBox {
  @_Concurrency.MainActor(unsafe) public func fill(model: EOFoundation.EODetailViewInformationBoxModel)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DevelopmentViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension EOFoundation.DevelopmentViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension EOFoundation.DevelopmentViewController : UIKit.UISearchResultsUpdating {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func updateSearchResults(for searchController: UIKit.UISearchController)
}
extension EOFoundation.DevelopmentViewController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
public enum EOFoundationKeys : Swift.String, EOFoundation.Stringable {
  case cancel, camera, gallery, address, done
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension EOFoundation.SessionManagerProtocol {
  public func registerDevice(completion: Self.SessionStringCompletion? = nil)
  public func login(with params: EOFoundation.RequestBodyParams, successCompletion: Self.SessionResponseCompletion?, errorCompletion: Self.SessionStringCompletion?)
  public func checkUserLoggedIn(successCompletion: Self.SessionValidCompletion?, errorCompletion: Self.SessionStringCompletion? = nil)
  public func signUp(with params: EOFoundation.RequestBodyParams, completion: @escaping Self.SessionStringCompletion)
  public func logout(completion: Self.SessionStringCompletion? = nil)
  public func validateUser(with code: Swift.String, completion: @escaping Self.SessionBoolCompletion)
  public func resetPassword(with email: Swift.String, completion: @escaping (Swift.Bool, Swift.String) -> Swift.Void)
  public func changePassword(with password: Swift.String, code: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  @available(*, deprecated, message: "use Post Vehicles call")
  public func updateLicensePlates(licensePLates: [Swift.String], completion: @escaping (EOFoundation.OneUserResponse) -> Swift.Void)
}
extension EOFoundation.Session {
  public struct LoginResponse : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Response : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Error : Swift.Codable {
    public let error: Swift.String
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ForgotPasswordResponse : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ChangePasswordResponse : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct SessionValid : Swift.Codable {
    public let sessionValid: Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public enum EmailResetState {
    case validated
    case notValidated
    case notExist
    case undefined
    public static func == (a: EOFoundation.Session.EmailResetState, b: EOFoundation.Session.EmailResetState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct EmailResetModel : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
}
public struct EOSwitchModel {
  public var text: Swift.String?
  public var isSelected: Swift.Bool
  public init(text: Swift.String?, isSelected: Swift.Bool = false)
}
public struct EOSwitchListModel {
  public var completion: ([EOFoundation.EOSwitchModel]) -> Swift.Void
  public init(headerText: Swift.String?, isEnabled: Swift.Bool, list: [EOFoundation.EOSwitchModel])
}
extension UIKit.UIFont {
  public func sizeOfString(string: Swift.String, constrainedToWidth width: Swift.Double) -> CoreGraphics.CGSize
  public static func custom(for fontType: Swift.String, fontSize: CoreGraphics.CGFloat) -> UIKit.UIFont
  public static func custom(for styleType: EOFoundation.TextStyleType) -> UIKit.UIFont
  public func printAll()
}
@objc @_Concurrency.MainActor(unsafe) open class PDFViewerController : EOFoundation.EOViewController {
  @_Concurrency.MainActor(unsafe) public init(pdfData: Foundation.Data?)
  @_Concurrency.MainActor(unsafe) public init(pdfDocument: PDFKit.PDFDocument?)
  @_Concurrency.MainActor(unsafe) public init(pdfURL: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc deinit
}
public struct AppSettings : EOFoundation.SettingsProtocol {
  public static var store: [Swift.Int : Swift.String]
}
public protocol SettingsProtocol {
  static var store: [Swift.Int : Swift.String] { get set }
  static func save(with id: Swift.Int, value: EOFoundation.SettingType)
  static func loadSettings<T>(for id: Swift.Int, with type: T.Type, completion: (T?) -> Swift.Void) where T : EOFoundation.SettingType
  static func loadStore()
  static func cacheStore()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class PlacesContentController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public var widget: EOFoundation.WidgetModel? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var placeID: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var contentList: [EOFoundation.ContentObject]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class Places : ObjectiveC.NSObject {
  public static var geocodingManager: EOFoundation.GeocodingManager
  public struct Manager : EOFoundation.PlacesProtocol {
    public static var apiKey: Swift.String
    public static func userCoordinate() -> CoreLocation.CLLocationCoordinate2D?
    public static func defaultCoordinate() -> CoreLocation.CLLocationCoordinate2D?
    public static func setup()
    public static func createPlaceDetailsUrl(from placeID: Swift.String) -> Swift.String
    public static func createDistanceUrl(from place: EOFoundation.Places.Model.Place) -> Swift.String
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EORadioTableViewCell : EOFoundation.EOTableViewCell {
  @objc deinit
}
extension EOFoundation.EORadioTableViewCell {
  @_Concurrency.MainActor(unsafe) final public func fill(model: EOFoundation.EORadioModel)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class EOSmallTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public let titleLabel: EOFoundation.EOHeadline4Label
  @_Concurrency.MainActor(unsafe) final public let descriptionLabel: EOFoundation.EOSubline1Label
  @_Concurrency.MainActor(unsafe) final public let detailLabel: EOFoundation.EONoteLabel
  @_Concurrency.MainActor(unsafe) final public let rightImageView: EOFoundation.EOImageView
  @_Concurrency.MainActor(unsafe) final public let containerView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, description: Swift.String? = nil, detail: Swift.String? = nil, image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, description: Swift.String? = nil, detail: Swift.String? = nil, imageURL: Swift.String?)
  @_Concurrency.MainActor(unsafe) open func setup()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class EOViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc deinit
}
@available(*, deprecated, renamed: "MediaContentType")
@frozen public enum ImageOrImageUrl {
  case image(UIKit.UIImage?)
  case url(Swift.String)
}
@frozen public enum MediaContentType {
  case image(UIKit.UIImage?)
  case url(Swift.String)
  case data(Foundation.Data)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class EOView : UIKit.UIView {
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) open func setup()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SearchResultsCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var section: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var page: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var resultText: Swift.String?
  @_Concurrency.MainActor(unsafe) public var searchText: Swift.String?
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NewsHeaderCell : EOFoundation.BaseContentCell {
  @_Concurrency.MainActor(unsafe) open var object: EOFoundation.ContentObject? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let contentStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public let detailsContent: EOFoundation.GradientOpacView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: EOFoundation.EOHeadline3Label
  @_Concurrency.MainActor(unsafe) final public let subtitleLabel: EOFoundation.EOSubline2Label
  @_Concurrency.MainActor(unsafe) final public let bodyLabel: EOFoundation.EOBodyLabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setupDetailsHolder()
  @_Concurrency.MainActor(unsafe) public func didClickCell()
  @objc deinit
}
public enum FileType : Swift.String {
  case text
  case json
  case html
  case pdf
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol LocalFileReader {
  static func loadLocalData<T>(to type: T.Type, fileName: Swift.String, fileType: EOFoundation.FileType, bundle: Foundation.Bundle, completion: (T?, Foundation.NSError?) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
}
extension EOFoundation.LocalFileReader {
  public static func loadLocalData<T>(to type: T.Type, fileName: Swift.String, fileType: EOFoundation.FileType, bundle: Foundation.Bundle = Bundle.main, completion: (T?, Foundation.NSError?) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
}
public struct EOSnackBarModel {
  public init(title: Swift.String, content: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EOSnackBar : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(viewController: UIKit.UIViewController, heightFromBottom: CoreGraphics.CGFloat, model: EOFoundation.EOSnackBarModel? = nil)
  @objc deinit
}
extension EOFoundation.EOSnackBar {
  @_Concurrency.MainActor(unsafe) public func showView()
  @_Concurrency.MainActor(unsafe) public func showView(model: EOFoundation.EOSnackBarModel)
  @_Concurrency.MainActor(unsafe) public func removeView()
}
@objc @_Concurrency.MainActor(unsafe) final public class EOImageView : UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage? = nil, highlightedImage: UIKit.UIImage? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.URL {
  public var queryParameters: [Swift.String : Swift.String]? {
    get
  }
}
extension Swift.Decodable {
  public static func parse(from item: Any?, strategy: Foundation.JSONDecoder.KeyDecodingStrategy = .useDefaultKeys) throws -> Self
}
public protocol SeparatorHiding {
}
public struct OneItemInfoRowModel {
  public var titleColor: UIKit.UIColor?
  public var subtitleColor: UIKit.UIColor?
  public var iconBackgroundColor: UIKit.UIColor?
  public init(title: Swift.String?, subtitle: Swift.String?, image: EOFoundation.MediaContentType)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CategoryCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var data: EOFoundation.FilterCategory? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let control: UIKit.UISwitch
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class WidgetsViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public var page: EOFoundation.Page
  @_Concurrency.MainActor(unsafe) final public var widgets: [EOFoundation.WidgetModel]
  @_Concurrency.MainActor(unsafe) public init(startPage: EOFoundation.Page)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension EOFoundation.WidgetsViewController : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
extension EOFoundation.WidgetsViewController : UIKit.UIViewControllerPreviewingDelegate {
  @_Concurrency.MainActor(unsafe) final public func registerForPeekAndPop()
  @_Concurrency.MainActor(unsafe) @objc final public func previewingContext(_ previewingContext: UIKit.UIViewControllerPreviewing, viewControllerForLocation location: CoreGraphics.CGPoint) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc final public func previewingContext(_ previewingContext: UIKit.UIViewControllerPreviewing, commit viewControllerToCommit: UIKit.UIViewController)
}
extension Foundation.Notification {
  public var keyboardEndFrame: CoreGraphics.CGRect? {
    get
  }
  public var keyboardAnimationDuration: Foundation.TimeInterval? {
    get
  }
}
public protocol NotificationHandlerProtocol {
  static func handleNotification(with info: [Swift.AnyHashable : Any])
}
extension EOFoundation.NotificationHandlerProtocol {
  public static func handleNotification(with info: [Swift.AnyHashable : Any])
}
public func bundle() -> Foundation.Bundle?
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ImageTileTextBottom : EOFoundation.ImageTile {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) override open func setup(with widget: EOFoundation.WidgetModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class PlacesListViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static func create(with places: [Swift.String]?) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EOPageControl : UIKit.UIPageControl {
  @objc dynamic public init()
  @objc deinit
}
public struct EOPriceViewModel : EOFoundation.EODetailViewListBoxCellModelProtocol {
  public var title: Swift.String
  public var subtitle: Swift.String
  public var image: UIKit.UIImage?
  public init(title: Swift.String, subtitle: Swift.String)
}
@objc @_Concurrency.MainActor(unsafe) public class EOPriceView : EOFoundation.EODetailViewListBox {
  @_Concurrency.MainActor(unsafe) public init(prices: [EOFoundation.EOPriceViewModel])
  @objc deinit
}
extension EOFoundation.EOPriceView : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
public protocol TableGroupProtocol : AnyObject {
  var implementation: EOFoundation.ControllerImplementationType { get }
  var numberOfItems: Swift.Int { get }
  func registerCells(for tableView: UIKit.UITableView)
  func cell(_ tableView: UIKit.UITableView, groupIndex: Swift.Int, for indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  func handleSelectRow(_ tableView: UIKit.UITableView, groupIndex: Swift.Int, for indexPath: Foundation.IndexPath)
}
extension EOFoundation.TableGroupProtocol {
  public func handleSelectRow(_ tableView: UIKit.UITableView, groupIndex: Swift.Int, for indexPath: Foundation.IndexPath)
}
public class TableGroup<Model, Cell> : EOFoundation.TableGroupProtocol where Model == Cell.Model, Cell : UIKit.UITableViewCell, Cell : EOFoundation.ConfigurableItem {
  public var implementation: EOFoundation.ControllerImplementationType
  public var tapAction: ((Cell, Model) -> Swift.Void)?
  public var numberOfItems: Swift.Int {
    get
  }
  public init(models: [Model], implementation: EOFoundation.ControllerImplementationType = .programmatically, tapAction: ((Cell, Model) -> Swift.Void)? = nil)
  public func registerCells(for tableView: UIKit.UITableView)
  public func cell(_ tableView: UIKit.UITableView, groupIndex: Swift.Int, for indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  public func handleSelectRow(_ tableView: UIKit.UITableView, groupIndex: Swift.Int, for indexPath: Foundation.IndexPath)
  public func refresh(model: Model, at index: Swift.Int? = nil)
  public func refresh(models: [Model])
  @objc deinit
}
public enum FloatActionButtonState {
  case rectangleView
  case roundView
  public static func == (a: EOFoundation.FloatActionButtonState, b: EOFoundation.FloatActionButtonState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EOFloatActionButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public init(buttonState: EOFoundation.FloatActionButtonState, title: Swift.String? = nil, customImage: EOFoundation.MediaContentType, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) final public func animateButtonToRoundView()
  @_Concurrency.MainActor(unsafe) final public func animateButtonToExtendedView()
  @objc deinit
}
public enum DateFormat : Swift.String {
  case shortDate
  case rssDate
  case fullDay
  case time
  case fromDate
  case dayMonthYear
  case year
  case monthSlashYear
  case monthDotYear
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.Date {
  public var timeIntervalMilliseconds: Swift.Double {
    get
  }
  public func string(with format: EOFoundation.DateFormat) -> Swift.String
  public func string(with format: Swift.String) -> Swift.String
  public func years(from date: Foundation.Date) -> Swift.Int
  public func months(from date: Foundation.Date) -> Swift.Int
  public func weeks(from date: Foundation.Date) -> Swift.Int
  public func days(from date: Foundation.Date) -> Swift.Int
  public func hours(from date: Foundation.Date) -> Swift.Int
  public func minutes(from date: Foundation.Date) -> Swift.Int
  public func seconds(from date: Foundation.Date) -> Swift.Int
  public func advanced(by amount: Swift.Int, of component: Foundation.Calendar.Component) -> Foundation.Date
  public var midnightGMT: Foundation.Date? {
    get
  }
}
extension Foundation.Date {
  public func formattedFromComponents(styleAttitude: Foundation.DateFormatter.Style, dayOfTheWeek: Swift.Bool = false, year: Swift.Bool = false, month: Swift.Bool = false, day: Swift.Bool = false, hour: Swift.Bool = false, minute: Swift.Bool = false, second: Swift.Bool = false, locale: Foundation.Locale = Locale.current) -> Swift.String
}
extension Swift.String {
  public func dateString(from format: EOFoundation.DateFormat, to aformat: EOFoundation.DateFormat) -> Swift.String?
  public func dateString(from format: Swift.String, to aformat: Swift.String) -> Swift.String?
  public func date(using format: EOFoundation.DateFormat) -> Foundation.Date?
  public func dateFromTimesTamp(using format: EOFoundation.DateFormat) -> Swift.String?
}
extension Swift.Double {
  public func dateTimeIntervalSince1970String(with dateFormat: EOFoundation.DateFormat) -> Swift.String?
  public func dateStringFromTimesTamp(using format: EOFoundation.DateFormat) -> Swift.String
  public func dateFromTimesTamp() -> Foundation.Date
  public func dateFromSecondsTimeStamp() -> Foundation.Date
  public func dateFromMillisecondsTimeStamp() -> Foundation.Date
  public var isPastDate: Swift.Bool {
    get
  }
  public var isFutureDate: Swift.Bool {
    get
  }
}
public protocol PushNotificator : UserNotifications.UNUserNotificationCenterDelegate {
  static var shared: EOFoundation.PushNotificator { get set }
  var instanceIdToken: Swift.String { get set }
  var application: UIKit.UIApplication? { get set }
  func setup(with application: UIKit.UIApplication)
}
extension EOFoundation.PushNotificator {
  public func configure(with application: UIKit.UIApplication)
  public func setup(with application: UIKit.UIApplication)
  public func setup()
}
public struct IconTextModel {
  public init(title: Swift.String, mediaContentType: EOFoundation.MediaContentType?)
  @available(*, deprecated, message: "use public init(title: String, mediaContentType: MediaContentType?)")
  public init(title: Swift.String, icon: EOFoundation.ImageOrImageUrl?)
}
public protocol Reusable {
  static var reuseId: Swift.String { get }
}
extension EOFoundation.Reusable {
  public static var reuseId: Swift.String {
    get
  }
}
public struct PDFCollectionItem : EOFoundation.PDFURLProvider {
  public var title: Swift.String
  public var subtitle: Swift.String
  public var headline: Swift.String
  public var description: Swift.String
  public var pdfData: Foundation.Data?
  public var pdfURL: Swift.String?
  public init(title: Swift.String, subtitle: Swift.String, headline: Swift.String, description: Swift.String, pdfData: Foundation.Data?, pdfURL: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PDFCollectionController : EOFoundation.EOViewController {
  @_Concurrency.MainActor(unsafe) public var collectionView: UIKit.UICollectionView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var data: [EOFoundation.PDFCollectionItem]
  @_Concurrency.MainActor(unsafe) public var selectedIndex: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isShowAllButtonVisible: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var showAllTitle: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func showAll()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc override dynamic public init()
  @objc deinit
}
extension EOFoundation.PDFCollectionController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension EOFoundation.PDFCollectionController : UIKit.UICollectionViewDelegateFlowLayout, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
}
public enum FilterBottomSheetType : Swift.Equatable {
  case checkbox
  case radio
  case listIcon
  case date(Foundation.Date)
  case time(Foundation.Date)
  public static func == (a: EOFoundation.FilterBottomSheetType, b: EOFoundation.FilterBottomSheetType) -> Swift.Bool
}
public protocol FilterBottomSheetDelegate : AnyObject {
  func didCloseFilterView(filteredItems: [EOFoundation.FilterBottomSheetRow])
  func didClickOnIndexPath(indexPath: Foundation.IndexPath, isSwitcherOn: Swift.Bool) -> [EOFoundation.FilterBottomSheetSection]?
}
public protocol FilterBottomSheetSectionProtocol {
  var sectionTitle: Swift.String { get set }
  var rows: [EOFoundation.FilterBottomSheetRow] { get set }
  var type: EOFoundation.FilterBottomSheetType { get set }
  var selectedIndexes: Swift.Set<Foundation.IndexPath> { get set }
}
final public class FilterBottomSheetSection {
  public init(sectionTitle: Swift.String?, rows: [EOFoundation.FilterBottomSheetRow], type: EOFoundation.FilterBottomSheetType)
  @objc deinit
}
final public class FilterBottomSheetRow {
  final public var isSelected: Swift.Bool
  final public let title: Swift.String
  final public let image: EOFoundation.MediaContentType
  final public var type: EOFoundation.FilterBottomSheetType
  final public let subtitle: Swift.String?
  public init(title: Swift.String, subtitle: Swift.String?, mediaContentType: EOFoundation.MediaContentType, type: EOFoundation.FilterBottomSheetType, isSelected: Swift.Bool?)
  @available(*, deprecated, message: "use init (title: String, subtitle: String?, mediaContentType: MediaContentType, type: FilterBottomSheetType, isSelected: Bool?) {")
  public init(title: Swift.String, subtitle: Swift.String?, image: EOFoundation.ImageOrImageUrl, type: EOFoundation.FilterBottomSheetType, isSelected: Swift.Bool?)
  @objc deinit
}
public struct FilterBottomSheetManager {
  public init(delegate: EOFoundation.FilterBottomSheetDelegate)
  public func showBottomSheet(with data: [EOFoundation.FilterBottomSheetSection], title: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EOButtonDetailedView : EOFoundation.EODetailViewBoxType {
  @_Concurrency.MainActor(unsafe) public var hasBackground: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(button: EOFoundation.EOButton)
  @_Concurrency.MainActor(unsafe) public init(button: EOFoundation.EOButton, title: Swift.String)
  @objc deinit
}
extension CoreLocation.CLLocationCoordinate2D {
  public func distance(from location: CoreLocation.CLLocationCoordinate2D) -> CoreLocation.CLLocationDistance
}
public struct Application {
  public static var window: UIKit.UIWindow {
    get
  }
  public static func push(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  public static func pop(to destinationViewController: UIKit.UIViewController, animated: Swift.Bool)
  public static func present(_ viewController: UIKit.UIViewController, animated: Swift.Bool, presentationStyle: UIKit.UIModalPresentationStyle = .fullScreen, completion: (() -> Swift.Void)? = nil)
  public static var currentController: UIKit.UIViewController? {
    get
  }
  public static func share(on sourceView: UIKit.UIView, string: Swift.String? = nil, image: UIKit.UIImage? = nil)
  public static func alert(title: Swift.String?, message: Swift.String? = nil, completion: (() -> Swift.Void)? = nil)
  public static func alert(title: Swift.String? = nil, message: Swift.String? = nil, actionTitle: Swift.String = "OK", action: ((UIKit.UIAlertAction) -> Swift.Void)? = nil)
  public static func alert(title: Swift.String, message: Swift.String = "", actionTitle: Swift.String = "", cancelTitle: Swift.String = "cancel".localized, action: ((UIKit.UIAlertAction) -> Swift.Void)? = nil)
  public static func alert(title: Swift.String? = nil, message: Swift.String? = nil, preferredStyle: UIKit.UIAlertController.Style = .alert, actions: [UIKit.UIAlertAction])
  public static func open(url: Swift.String)
  public static func open(url: Foundation.URL)
  public static func openPDF(with url: Swift.String, title: Swift.String = "")
  public static func openRoutes(from location: CoreLocation.CLLocationCoordinate2D? = Places.Manager.userCoordinate(), to destination: CoreLocation.CLLocationCoordinate2D, destinationName: Swift.String? = nil)
}
public enum Environment : Swift.String {
  case development
  case release
  public var baseUrl: Swift.String {
    get
  }
  public func baseURL(version: Swift.Int = 1) -> Swift.String
  public var contenthubUrl: Swift.String {
    get
  }
  public func connectorURL(version: Swift.Int = 1) -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol ConfigurationProtocol {
  var environmment: EOFoundation.Environment { get set }
  var id: Swift.Int { get }
  var bundleID: Swift.String { get }
}
public struct Configurations : EOFoundation.ConfigurationProtocol {
  public var environmment: EOFoundation.Environment
  public var id: Swift.Int
  public var bundleID: Swift.String
  public enum Configuration : Swift.String, Swift.CaseIterable {
    case three, badTabarz, braunschweig, braunschweigTest, burgenland, buxtehude, cssvTwo, delmenhorst, duesseldorf, dipkoParkingDev, demo, entega, ednetze, foehr, guetersloh, hamm, hammTest, heidelberg, heidelbergCity, itzehoe, karlsruhe, kaiserslautern, konstanz, luebeck, luebeckTest, mainova, muehlacker, muehlackerTest, muhlackerCardDev, menden, neumuenster, neuruppin, plon, powerfox, powercloud, rodgau, qcells, schkeuditz, schwerte, crailsheim, speyer, speyer2, sylt, travekom, trier, trierTest, weisswasser, winsen, wolfsburg, wuerzburg, wuerzburgInternalTest
    public var bundleID: Swift.String {
      get
    }
    public init(id: Swift.Int)
    public var id: Swift.Int {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias AllCases = [EOFoundation.Configurations.Configuration]
    public typealias RawValue = Swift.String
    public static var allCases: [EOFoundation.Configurations.Configuration] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
extension EOFoundation.Configurations {
  public struct Schemas {
    public static let readdy: Swift.String
  }
}
public protocol ConfigurableItem : AnyObject {
  associatedtype Model
  var model: Self.Model? { get set }
  func configure(with model: Self.Model?)
  func update()
}
extension EOFoundation.ConfigurableItem {
  public func configure(with model: Self.Model?)
}
@objc @_inheritsConvenienceInitializers public class NotificationManager : ObjectiveC.NSObject, EOFoundation.PushNotificator {
  public var application: UIKit.UIApplication?
  public static var shared: EOFoundation.PushNotificator
  public struct Handler : EOFoundation.NotificationHandlerProtocol {
  }
  public struct Notificator : EOFoundation.NotificatorProtocol {
  }
  public var instanceIdToken: Swift.String
  @objc override dynamic public init()
  public func messaging(didReceiveRegistrationToken token: Swift.String)
  public func messaging(didReceiveInstanceID result: Swift.Result<Swift.String, Swift.Error>)
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc deinit
}
public struct EOTextFieldCellModel {
  public var headline: Swift.String?
  public var completion: (Swift.String) -> Swift.Void
  public init(placeholder: Swift.String, type: EOFoundation.TextFieldType, text: Swift.String, completion: @escaping (Swift.String) -> Swift.Void)
  public init(placeholder: Swift.String?, type: EOFoundation.TextFieldType, text: Swift.String?, headline: Swift.String?, isSecureTextEntry: Swift.Bool, isEnabled: Swift.Bool, items: [Swift.String] = [])
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EOTextFieldCell : EOFoundation.EOTableViewCell {
  @_Concurrency.MainActor(unsafe) final public let textField: EOFoundation.EOTextField
  @objc deinit
}
extension EOFoundation.EOTextFieldCell {
  @_Concurrency.MainActor(unsafe) final public func fill(model: EOFoundation.EOTextFieldCellModel)
  @_Concurrency.MainActor(unsafe) final public func fill(model: EOFoundation.EOTextFieldCellModel, delegate: UIKit.UITextFieldDelegate?)
}
extension EOFoundation.EOTextFieldCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
extension EOFoundation.EOTextFieldCell : UIKit.UIPickerViewDelegate, UIKit.UIPickerViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc final public func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
}
extension EOFoundation.Places {
  public struct Model {
    public struct AddressComponent {
      public var types: [Swift.String]
      public var name: Swift.String
    }
    public struct Place {
      public var name: Swift.String?
      public var placeID: Swift.String?
      public var formattedAddress: Swift.String?
      public var coordinate: CoreLocation.CLLocationCoordinate2D
      public var phoneNumber: Swift.String?
      public var types: [Swift.String]
      public var website: Foundation.URL?
      public let addressComponents: [EOFoundation.Places.Model.AddressComponent]
      public init(name: Swift.String?, placeID: Swift.String?, coordinate: CoreLocation.CLLocationCoordinate2D, phoneNumber: Swift.String?, types: [Swift.String], website: Foundation.URL?, addressComponents: [EOFoundation.Places.Model.AddressComponent])
    }
    public struct Address {
      public var street: Swift.String
      public var houseNumber: Swift.String
      public var city: Swift.String
      public var zip: Swift.String
    }
    public struct PlaceImage {
    }
    public struct CoordinateBounds {
      public var northEast: CoreLocation.CLLocationCoordinate2D
      public var southWest: CoreLocation.CLLocationCoordinate2D
      public init(northEast: CoreLocation.CLLocationCoordinate2D, southWest: CoreLocation.CLLocationCoordinate2D)
    }
    public enum AutocompleteFilter : Swift.Int {
      case noFilter
      case geocode
      case address
      case establishement
      case region
      case city
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public struct AutocompletePrediction {
      public var placeID: Swift.String
      public var attributedFullText: Foundation.NSAttributedString
      public init(placeID: Swift.String, attributedFullText: Foundation.NSAttributedString)
    }
    public struct GooglePlaceDetailsError : Swift.Codable {
      public let errorMessage: Swift.String
      public let htmlAttributions: [EOFoundation.JSONAny]
      public let status: Swift.String
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct PlaceDetailsMapper : Swift.Codable {
      public let htmlAttributions: [EOFoundation.JSONAny]
      public let result: EOFoundation.Places.Model.Result
      public let status: Swift.String
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct DistanceResponse : Swift.Codable {
      public let destinationAddresses: [Swift.String], originAddresses: [Swift.String]
      public let rows: [EOFoundation.Places.Model.DistanceResponse.Row]
      public let status: Swift.String
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case destinationAddresses
        case originAddresses
        case rows, status
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public struct Row : Swift.Codable {
        public let elements: [EOFoundation.Places.Model.DistanceResponse.Element]
        public func encode(to encoder: Swift.Encoder) throws
        public init(from decoder: Swift.Decoder) throws
      }
      public struct Element : Swift.Codable {
        public let distance: EOFoundation.Places.Model.DistanceResponse.Distance, duration: EOFoundation.Places.Model.DistanceResponse.Distance
        public let status: Swift.String
        public func encode(to encoder: Swift.Encoder) throws
        public init(from decoder: Swift.Decoder) throws
      }
      public struct Distance : Swift.Codable {
        public let text: Swift.String
        public let value: Swift.Int
        public func encode(to encoder: Swift.Encoder) throws
        public init(from decoder: Swift.Decoder) throws
      }
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Result : Swift.Codable {
      public let adrAddress: Swift.String?
      public let openingHours: EOFoundation.Places.Model.OpeningHours?
      public let photos: [EOFoundation.Places.Model.Photo]?
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct OpeningHours : Swift.Codable {
      public let openNow: Swift.Bool
      public let periods: [EOFoundation.Places.Model.Period]
      public let weekdayText: [Swift.String]
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Period : Swift.Codable {
      public let periodOpen: EOFoundation.Places.Model.Open
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Open : Swift.Codable {
      public let day: Swift.Int
      public let time: Swift.String
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Photo : Swift.Codable {
      public let height: Swift.Int
      public let htmlAttributions: [Swift.String]
      public let photoReference: Swift.String
      public let width: Swift.Int
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
  }
}
public struct EOLabelCellModel {
  public init(text: Swift.String?, alignment: UIKit.NSTextAlignment, style: EOFoundation.TextStyleType? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ContentControllerType : EOFoundation.WidgetViewControllerType {
  @_Concurrency.MainActor(unsafe) public var widget: EOFoundation.WidgetModel? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public static var implementationType: EOFoundation.ControllerImplementationType
  @_Concurrency.MainActor(unsafe) public var navigationType: EOFoundation.ControllerNavigationType
  @_Concurrency.MainActor(unsafe) public var contentList: [EOFoundation.ContentObject]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let contentTableView: EOFoundation.ContentTableView
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public static func create(with content: [EOFoundation.ContentObject]?, widget: EOFoundation.WidgetModel?) -> UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) open func setup(with widget: EOFoundation.WidgetModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol BottomSheetDialogTextFieldViewDelegate : AnyObject {
  func textChanged(text: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BottomSheetDialogTextFieldView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(textFieldItem: EOFoundation.EOBottomSheetTextFieldItem, delegate: EOFoundation.BottomSheetDialogTextFieldViewDelegate? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TitleTableViewHeader : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) final public func configure(title: Swift.String)
  @objc deinit
}
public protocol EODetailViewListBoxCellModelProtocol {
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
  var image: UIKit.UIImage? { get set }
}
public struct EODetailViewListBoxCellModel : EOFoundation.EODetailViewListBoxCellModelProtocol {
  public var title: Swift.String
  public var subtitle: Swift.String
  public var image: UIKit.UIImage?
  public init(title: Swift.String, subtitle: Swift.String, image: UIKit.UIImage)
}
public struct EODetailViewListBoxModel {
  public var cellModels: [EOFoundation.EODetailViewListBoxCellModelProtocol]
  public init(cellModels: [EOFoundation.EODetailViewListBoxCellModelProtocol])
}
public enum OneFoundation {
  public static let permission: EOFoundation.PermissionManager
  public struct Service : EOFoundation.Requester {
    public static var debugPrint: Swift.Bool
  }
  public struct Files : EOFoundation.LocalFileReader {
  }
  public static let network: EOFoundation.ReachabilityManager
  public static let cache: EOFoundation.CacheProtocol
  public static var config: EOFoundation.ConfigurationProtocol
  public static func save()
  public static func getWidgetIds(by key: Swift.String) -> [Swift.Int]
  public static var apnsToken: Foundation.Data? {
    get
    set
  }
  public static func setupFirebase(for application: UIKit.UIApplication)
}
@_hasMissingDesignatedInitializers public class Session : EOFoundation.SessionManagerProtocol {
  public static var shared: EOFoundation.Session
  public var user: EOFoundation.User? {
    get
  }
  public var token: Swift.String {
    get
    set
  }
  public var isLoggedIn: Swift.Bool {
    get
  }
  public var isDeviceRegistered: Swift.Bool {
    get
  }
  public var systemWideLoginIsAvailable: Swift.Bool {
    get
  }
  public func getOneUser(completion: @escaping (EOFoundation.OneUserResponse) -> Swift.Void)
  public func setup()
  public func showLoginOrRegister(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func showLoginOrRegisterForce(completion: @escaping (Swift.Bool) -> Swift.Void)
  @available(*, deprecated, renamed: "isLoggedIn")
  public var isUserLoggedIn: Swift.Bool {
    get
  }
  @available(*, deprecated, renamed: "showLoginOrRegister")
  public func askForLogin()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ActionMenuViewController : UIKit.UITableViewController {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: EOFoundation.ActionMenuViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol ActionMenuViewControllerDelegate : AnyObject {
  func actionMenuViewControllerShareDocument(_ actionMenuViewController: EOFoundation.ActionMenuViewController)
  func actionMenuViewControllerPrintDocument(_ actionMenuViewController: EOFoundation.ActionMenuViewController)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EOSearchBar : UIKit.UISearchBar {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EORadioListCell : EOFoundation.EOTableViewCell {
  @objc deinit
}
extension EOFoundation.EORadioListCell {
  @_Concurrency.MainActor(unsafe) final public func fill(model: EOFoundation.EORadioListModel)
}
extension EOFoundation.EORadioListCell : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
final public class GraphQLFeedParser : EOFoundation.FeedParserProtocol {
  final public var feeds: [EOFoundation.NewsFeedModel]
  final public var url: Swift.String
  final public var lastLoad: Foundation.Date {
    get
    set
  }
  final public var configuration: EOFoundation.NewsServiceConfig?
  public init(url: Swift.String, configuration: EOFoundation.NewsServiceConfig)
  final public func fetch(completion: @escaping (EOFoundation.FeedResultType) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class InfoViewImageCell : EOFoundation.EOTableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
extension EOFoundation.InfoViewImageCell {
  @_Concurrency.MainActor(unsafe) public func fill(model: EOFoundation.InfoViewImageModel)
}
public struct WidgetModel : Swift.Codable {
  public let id: Swift.Int
  public let type: Swift.String
  public let tile: EOFoundation.Tile
  public var configValues: [EOFoundation.ConfigurationValue]
  public let position: EOFoundation.Dimension
  public enum Keys : Swift.String, EOFoundation.Stringable {
    case icon
    case newsCount
    case title
    case subtitle
    case url
    case source
    case defaultImageUrl
    case tileTitle
    case image
    case link
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension EOFoundation.WidgetModel : Swift.Equatable {
  public static func == (lhs: EOFoundation.WidgetModel, rhs: EOFoundation.WidgetModel) -> Swift.Bool
}
public struct ConfigurationValue : Swift.Codable {
  public let key: Swift.String
  public let value: EOFoundation.Value
  public init(key: Swift.String, value: EOFoundation.Value)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Tile : Swift.Codable {
  public let type: Swift.String
  public let size: EOFoundation.Dimension
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Dimension : Swift.Codable {
  public let row: CoreGraphics.CGFloat, col: CoreGraphics.CGFloat
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Value : Swift.Codable {
  case bool(Swift.Bool)
  case string(Swift.String)
  case stringArray([Swift.String])
  case double(Swift.Double)
  case int(Swift.Int)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var stringVal: Swift.String {
    get
  }
  public var array: [Swift.String] {
    get
  }
  public var boolVal: Swift.Bool {
    get
  }
  public var double: Swift.Double {
    get
  }
  public var int: Swift.Int {
    get
  }
}
public struct WidgetUserProfile {
  public static func widget() -> EOFoundation.WidgetContainer
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ContentCell : EOFoundation.DetailsCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class EOTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @available(iOS 7.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(*, deprecated, renamed: "EOSocialMediaDelegate")
public protocol EODetailViewListBoxDelegate : AnyObject {
  func didSelectListItemAtIndexPath(indexPath: Foundation.IndexPath)
}
public protocol EOSocialMediaDelegate : AnyObject {
  func didSelectListItemAtIndexPath(indexPath: Foundation.IndexPath)
}
public struct EODetaiViewListModel : EOFoundation.EODetailViewListBoxCellModelProtocol {
  public var title: Swift.String
  public var subtitle: Swift.String
  public var image: UIKit.UIImage?
  public init(title: Swift.String, subtitle: Swift.String, image: UIKit.UIImage?)
}
@objc @_Concurrency.MainActor(unsafe) public class EOSocialMediaView : EOFoundation.EODetailViewListBox {
  @_Concurrency.MainActor(unsafe) weak public var delegate: EOFoundation.EOSocialMediaDelegate?
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, models: [EOFoundation.EODetailViewListBoxCellModelProtocol])
  @objc deinit
}
extension EOFoundation.EOSocialMediaView : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension Swift.Array where Element == EOFoundation.SocialMediaModel {
  public func convertToEODetailViewListModel(with header: Swift.String) -> EOFoundation.EODetailViewListBoxModel
}
extension UIKit.UINib {
  @_Concurrency.MainActor(unsafe) convenience public init<ViewType>(viewType: ViewType.Type) where ViewType : UIKit.UIView
}
@objc @_inheritsConvenienceInitializers final public class TableDataSource : ObjectiveC.NSObject {
  public enum Update {
    case addSection(EOFoundation.TableSectionProtocol)
    case insertSection(EOFoundation.TableSectionProtocol, at: Swift.Int)
    case removeSection(EOFoundation.TableSectionProtocol)
    case moveSection(EOFoundation.TableSectionProtocol, at: Swift.Int)
    case reloadSection(EOFoundation.TableSectionProtocol)
    case addGroup(EOFoundation.TableGroupProtocol, inside: EOFoundation.TableSectionProtocol)
    case insertGroup(EOFoundation.TableGroupProtocol, at: Swift.Int, inside: EOFoundation.TableSectionProtocol)
    case removeGroup(EOFoundation.TableGroupProtocol, from: EOFoundation.TableSectionProtocol)
    case moveGroup(EOFoundation.TableGroupProtocol, to: Swift.Int, inside: EOFoundation.TableSectionProtocol)
    case reloadGroup(EOFoundation.TableGroupProtocol, inside: EOFoundation.TableSectionProtocol)
  }
  final public var sections: [EOFoundation.TableSectionProtocol]
  final public func subscribe(to tableView: UIKit.UITableView)
  final public func update(update updateBlock: (inout [EOFoundation.TableDataSource.Update]) -> Swift.Void)
  final public func update(update updateBlock: (inout [EOFoundation.TableDataSource.Update]) -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
extension EOFoundation.TableDataSource : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, titleForFooterInSection section: Swift.Int) -> Swift.String?
}
extension EOFoundation.TableDataSource : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension EOFoundation.TableDataSource.Update : Swift.Comparable {
  public static func < (lhs: EOFoundation.TableDataSource.Update, rhs: EOFoundation.TableDataSource.Update) -> Swift.Bool
  public static func == (lhs: EOFoundation.TableDataSource.Update, rhs: EOFoundation.TableDataSource.Update) -> Swift.Bool
}
public protocol WidgetFactory : AnyObject {
  var widgets: [Swift.String : EOFoundation.WidgetType] { get set }
  func widget(for type: Swift.String) -> EOFoundation.WidgetType?
  func register(widget: EOFoundation.WidgetContainer)
  func createWidget(cell: EOFoundation.WidgetCollectionCellType.Type, presentationProvider: EOFoundation.WidgetPresentationProvider) -> EOFoundation.WidgetType
  func createController(using widgetModel: EOFoundation.WidgetModel) -> UIKit.UIViewController?
}
extension EOFoundation.WidgetFactory {
  public func widget(for type: Swift.String) -> EOFoundation.WidgetType?
  public func createWidget(cell: EOFoundation.WidgetCollectionCellType.Type, presentationProvider: EOFoundation.WidgetPresentationProvider) -> EOFoundation.WidgetType
  public func register(widget: EOFoundation.WidgetContainer)
  public func createController(using widgetModel: EOFoundation.WidgetModel) -> UIKit.UIViewController?
}
public struct DefaultWidgetPresentationProvider<ViewController> : EOFoundation.WidgetPresentationProvider where ViewController : UIKit.UIViewController, ViewController : EOFoundation.ControllerProtocol {
  public let navigationType: EOFoundation.ControllerNavigationType
  public init(navigationType: EOFoundation.ControllerNavigationType)
  public func viewController(using widget: EOFoundation.WidgetModel) -> UIKit.UIViewController?
}
@_hasMissingDesignatedInitializers final public class WidgetsManager : EOFoundation.WidgetFactory {
  final public var widgets: [Swift.String : EOFoundation.WidgetType]
  public static let shared: EOFoundation.WidgetsManager
  @objc deinit
}
extension EOFoundation.Page {
  public var availableWidgets: [EOFoundation.WidgetModel] {
    get
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var insideNavigation: UIKit.UINavigationController {
    get
  }
  @_Concurrency.MainActor(unsafe) public func setupBackground()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func pop()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func popToRoot()
  @_Concurrency.MainActor(unsafe) public func addCloseBarButtonItem()
  @_Concurrency.MainActor(unsafe) public static var nibID: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public func prepareForModal()
  @_Concurrency.MainActor(unsafe) public func addExitFloatButton()
  @_Concurrency.MainActor(unsafe) public func addDragToPopGesture()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func panGestureRecognizerHandler(_ gesture: UIKit.UIPanGestureRecognizer)
  @_Concurrency.MainActor(unsafe) public static var reuseIdentifier: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public func add(child: UIKit.UIViewController, in containerView: UIKit.UIView, attachEdges: UIKit.UIRectEdge = .all, insets: UIKit.UIEdgeInsets = .zero)
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func exit()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class InfoViewController : EOFoundation.EOViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func fill(model: EOFoundation.InfoViewModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc override dynamic public init()
  @objc deinit
}
extension EOFoundation.InfoViewController {
  @_Concurrency.MainActor(unsafe) public func showActivityIndictor(show: Swift.Bool)
}
extension EOFoundation.InfoViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
public protocol Tappable {
  func didTapView()
}
public protocol NewsFeedModel {
  var link: Swift.String { get set }
}
public enum FeedType : Swift.String {
  case json
  case rss
  case atom
  case graphQL
  case publicTransport
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@frozen public enum FeedResultType {
  case success([EOFoundation.NewsFeedModel])
  case failure(Swift.Error?)
}
public enum TextFieldType {
  case number
  case email
  case newPassword
  case password
  case name
  case firstName
  case familyName
  case street
  case standard
  case houseNumber
  case zip
  case city
  public static func == (a: EOFoundation.TextFieldType, b: EOFoundation.TextFieldType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class EOTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public init(textFieldType: EOFoundation.TextFieldType = .standard)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol Requester {
  static var debugPrint: Swift.Bool { get }
  static func loadData(from request: EOFoundation.Request, completion: @escaping (Swift.Result<Foundation.Data, EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void)
  static func loadImage(from url: Swift.String, completion: @escaping (Swift.Result<(UIKit.UIImage, isFromCache: Swift.Bool), EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void)
  static func loadPDF(from url: Swift.String, completion: @escaping (Swift.Result<PDFKit.PDFDocument, EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void)
  static func execute(request: EOFoundation.Request, ignoreCacheTimeout: Swift.Bool, reload: Swift.Bool, completion: @escaping (Swift.Result<Swift.Bool, EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void)
  static func fetch<Model>(model: Model.Type, from request: EOFoundation.Request, ignoreCacheTimeout: Swift.Bool, reload: Swift.Bool, completion: @escaping (Swift.Result<Model, EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void) where Model : EOFoundation.Cacheable, Model : Swift.Decodable, Model : Swift.Encodable
  static func fetch<Model>(model: Model.Type, from request: EOFoundation.Request, completion: @escaping (Swift.Result<Model, EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void) where Model : Swift.Decodable, Model : Swift.Encodable
  static func fetch<Model, ErrorModel>(model: Model.Type, errorModel: ErrorModel.Type, from request: EOFoundation.Request, ignoreCacheTimeout: Swift.Bool, reload: Swift.Bool, completion: @escaping (Swift.Result<Model, EOFoundation.HTTPCallErrorType<ErrorModel>>) -> Swift.Void) where Model : EOFoundation.Cacheable, Model : Swift.Decodable, Model : Swift.Encodable, ErrorModel : Swift.Decodable, ErrorModel : Swift.Encodable
  static func fetch<Model, ErrorModel>(model: Model.Type, errorModel: ErrorModel.Type, from request: EOFoundation.Request, completion: @escaping (Swift.Result<Model, EOFoundation.HTTPCallErrorType<ErrorModel>>) -> Swift.Void) where Model : Swift.Decodable, Model : Swift.Encodable, ErrorModel : Swift.Decodable, ErrorModel : Swift.Encodable
  static func fetch<Model, Configuration>(model: Model.Type, configuration: Configuration, completion: @escaping (Swift.Result<[Model], EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void) where Model : Swift.Decodable, Model : Swift.Encodable, Configuration : EOFoundation.ContentHubConfiguration
}
extension EOFoundation.Requester {
  public static func loadData(from request: EOFoundation.Request, completion: @escaping (Swift.Result<Foundation.Data, EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void)
  public static func loadImage(from url: Swift.String, completion: @escaping (Swift.Result<(UIKit.UIImage, isFromCache: Swift.Bool), EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void)
  public static func loadPDF(from url: Swift.String, completion: @escaping (Swift.Result<PDFKit.PDFDocument, EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void)
  public static func execute(request: EOFoundation.Request, ignoreCacheTimeout: Swift.Bool = false, reload: Swift.Bool = false, completion: @escaping (Swift.Result<Swift.Bool, EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void)
  public static func fetch<Model>(model: Model.Type, from request: EOFoundation.Request, ignoreCacheTimeout: Swift.Bool = false, reload: Swift.Bool = false, completion: @escaping (Swift.Result<Model, EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void) where Model : EOFoundation.Cacheable, Model : Swift.Decodable, Model : Swift.Encodable
  public static func fetch<Model>(model: Model.Type, from request: EOFoundation.Request, completion: @escaping (Swift.Result<Model, EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void) where Model : Swift.Decodable, Model : Swift.Encodable
  public static func fetch<Model, ErrorModel>(model: Model.Type, errorModel: ErrorModel.Type, from request: EOFoundation.Request, ignoreCacheTimeout: Swift.Bool = false, reload: Swift.Bool = false, completion: @escaping (Swift.Result<Model, EOFoundation.HTTPCallErrorType<ErrorModel>>) -> Swift.Void) where Model : EOFoundation.Cacheable, Model : Swift.Decodable, Model : Swift.Encodable, ErrorModel : Swift.Decodable, ErrorModel : Swift.Encodable
  public static func fetch<Model, ErrorModel>(model: Model.Type, errorModel: ErrorModel.Type, from request: EOFoundation.Request, completion: @escaping (Swift.Result<Model, EOFoundation.HTTPCallErrorType<ErrorModel>>) -> Swift.Void) where Model : Swift.Decodable, Model : Swift.Encodable, ErrorModel : Swift.Decodable, ErrorModel : Swift.Encodable
  public static func fetch<Model, Configuration>(model: Model.Type, configuration: Configuration, completion: @escaping (Swift.Result<[Model], EOFoundation.HTTPCallErrorType<Any>>) -> Swift.Void) where Model : Swift.Decodable, Model : Swift.Encodable, Configuration : EOFoundation.ContentHubConfiguration
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MapTypeSelectorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let selectionButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) public init(map: MapKit.MKMapView)
  @objc deinit
}
public typealias QrCompletion = (_ result: Swift.String?, _ viewController: UIKit.UIViewController) -> Swift.Void
public protocol QrScanner {
  func presentScanner(with widget: EOFoundation.WidgetModel?, title: Swift.String?, completion: @escaping EOFoundation.QrCompletion)
  func pushScanner(with widget: EOFoundation.WidgetModel?, title: Swift.String?, completion: @escaping EOFoundation.QrCompletion)
}
public enum QrCodeType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case mapIOS
  case mapIOSv2
  case mapGoogleDirect
  case mapGoogleWeb
  case mapGoogleWeb2
  case mapGoogleWeb3
  case swtMapWorkarround
  public init?(rawValue: Swift.String)
  public typealias AllCases = [EOFoundation.QrCodeType]
  public typealias RawValue = Swift.String
  public static var allCases: [EOFoundation.QrCodeType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension EOFoundation.QrScanner {
  public func presentScanner(with widget: EOFoundation.WidgetModel? = nil, title: Swift.String? = nil, completion: @escaping EOFoundation.QrCompletion)
  public func pushScanner(with widget: EOFoundation.WidgetModel? = nil, title: Swift.String? = nil, completion: @escaping EOFoundation.QrCompletion)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class EOScannerViewControllerType : EOFoundation.WidgetViewControllerType, AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) public func setup(with widget: EOFoundation.WidgetModel)
  @_Concurrency.MainActor(unsafe) public static var implementationType: EOFoundation.ControllerImplementationType
  @_Concurrency.MainActor(unsafe) public var navigationType: EOFoundation.ControllerNavigationType
  @_Concurrency.MainActor(unsafe) public var widget: EOFoundation.WidgetModel?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class EOTabBarItem : UIKit.UITabBarItem {
  @_Concurrency.MainActor(unsafe) public var page: EOFoundation.Page
  @_Concurrency.MainActor(unsafe) public init(with startPage: EOFoundation.Page)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func loadFrom(url: Swift.String?, with placeholder: Swift.String? = nil)
  @objc deinit
}
public struct EODateTextFieldCellModel {
  public var headline: Swift.String?
  public var completion: (Foundation.Date) -> Swift.Void
  public init(placeholder: Swift.String?, text: Swift.String?, headline: Swift.String?, isEnabled: Swift.Bool, currentDate: Foundation.Date?, minimumDate: Foundation.Date?, maximumDate: Foundation.Date?)
}
public protocol ContentProtocol {
  func getTitle() -> Swift.String
  func getContent() -> [EOFoundation.ContentObject]
  func getContent(completion: ([EOFoundation.ContentObject]) -> Swift.Void)
  func getLocation() -> CoreLocation.CLLocationCoordinate2D?
}
extension EOFoundation.ContentProtocol {
  public func getContent(completion: ([EOFoundation.ContentObject]) -> Swift.Void)
}
extension Swift.Array where Element : EOFoundation.ContentProtocol {
  public var availableLocations: [Element] {
    get
  }
}
public struct ContentResponse : Swift.Codable {
  public var contentList: [EOFoundation.ContentObject]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ContentType : Swift.String, Swift.Codable {
  case title, text, gallery, titledList, address, contact, event, openingHours, parkingFreePlaces, offer, newsHeader, tariffs, content, audio, socialMedia
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ContentObject : Swift.Codable {
  public var id: Swift.String
  public var type: EOFoundation.ContentType
  public var title: Swift.String?, subTitle: Swift.String?, descriptionText: Swift.String?
  public var bgImageURL: Swift.String?
  public var startDate: Swift.Double?
  public var endDate: Swift.Double?
  public var imagesList: [Swift.String]?
  public var audiosList: [Swift.String]?
  public var mediaList: [EOFoundation.MediaModel]?
  public var itemsList: [EOFoundation.ListItem]?
  public var location: EOFoundation.Location?
  public var contactList: [EOFoundation.ContactItem]?
  public var mainMedia: EOFoundation.MediaModel?
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ItemValue : Swift.Codable {
  case bool(Swift.Bool)
  case string(Swift.String)
  public var value: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum ContactType : Swift.String, Swift.Codable {
  case email, phoneNumber, website
  case facebook
  case youtube
  case twitter
  case instagram
  public var image: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ContactItem : Swift.Codable {
  public var type: EOFoundation.ContactType
  public var value: Swift.String
  public var subject: Swift.String?
  public init(type: EOFoundation.ContactType, value: Swift.String, subject: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ListItem : Swift.Codable {
  public init(title: Swift.String, value: EOFoundation.ItemValue? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Location : Swift.Codable {
  public var lat: Swift.Double, long: Swift.Double
  public var address: Swift.String?, title: Swift.String?, subTitle: Swift.String?
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UIEdgeInsets {
  public init(inset: CoreGraphics.CGFloat)
}
extension Swift.StringProtocol {
  public func substring(from start: Self, to end: Self? = nil, options: Swift.String.CompareOptions = []) -> Self.SubSequence?
}
extension Swift.String {
  public func appending(_ string: EOFoundation.Stringable) -> Swift.String
  public var isAbsoluteEmpty: Swift.Bool {
    get
  }
  public var color: UIKit.UIColor {
    get
  }
  public var host: Swift.String {
    get
  }
  public var isValidEmail: Swift.Bool {
    get
  }
  public func string(by range: Foundation.NSRange) -> Swift.String
  public func withoutSpacing() -> Swift.String
  public func localized(in bundle: Foundation.Bundle?) -> Swift.String
  public func height(withConstrainedWidth width: CoreGraphics.CGFloat, font: UIKit.UIFont) -> CoreGraphics.CGFloat
  public func width(withConstrainedHeight height: CoreGraphics.CGFloat, font: UIKit.UIFont) -> CoreGraphics.CGFloat
  public func makeHyperLink(with urlString: Swift.String) -> Foundation.NSAttributedString
  public var isValidURL: Swift.Bool {
    get
  }
  public var swapIconUrlIfNeeded: Swift.String {
    get
  }
  public func dictionary() -> [Swift.String : Any]?
}
extension Foundation.NSAttributedString {
  public func textSize(for containerSize: CoreGraphics.CGSize) -> CoreGraphics.CGRect
}
extension Swift.String {
  public var cleanURL: Foundation.URL? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BasicCarouselTile : EOFoundation.WidgetCollectionCellType {
  @_Concurrency.MainActor(unsafe) public static var implementationType: EOFoundation.CellImplementationType
  @_Concurrency.MainActor(unsafe) open var cellsForRegistration: [UIKit.UICollectionViewCell.Type] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var numberOfItems: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) public var cellConfiguration: ((UIKit.UICollectionView, Foundation.IndexPath) -> UIKit.UICollectionViewCell)?
  @_Concurrency.MainActor(unsafe) public var cellSelection: ((Foundation.IndexPath) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setup(with widget: EOFoundation.WidgetModel)
  @_Concurrency.MainActor(unsafe) public func reload()
  @objc deinit
}
extension EOFoundation.BasicCarouselTile : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension EOFoundation.BasicCarouselTile : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BasicCarouselTileCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct DetailedViewObject {
  @available(*, deprecated, message: "use other init")
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, addressString: Swift.String?, phoneNumber: EOFoundation.ContentContactModel?, emailNumber: EOFoundation.ContentContactModel?, website: EOFoundation.ContentContactModel?, iconTextModels: [EOFoundation.IconTextModel], title: Swift.String, mainImage: EOFoundation.MediaModel?, additionalMedia: [EOFoundation.MediaModel]?, socialMedia: [EOFoundation.SocialMediaModel]?, subtitle: Swift.String?, description: Swift.String?)
  public init(coordinate: CoreLocation.CLLocationCoordinate2D, addressString: Swift.String?, phoneNumber: EOFoundation.ContentContactModel?, emailAddress: EOFoundation.ContentContactModel?, website: EOFoundation.ContentContactModel?, iconTextModels: [EOFoundation.IconTextModel], title: Swift.String, mainImage: EOFoundation.MediaModel?, additionalMedia: [EOFoundation.MediaModel]?, socialMedia: [EOFoundation.SocialMediaModel]?, subtitle: Swift.String?, description: Swift.String?)
}
public enum FilterType {
  case category([Swift.String])
  case date(Foundation.Date)
  case none
}
public protocol FilterProtocol {
  func startFiltering(with type: EOFoundation.FilterType)
  func didApply(filter: EOFoundation.FilterType)
  func switchTo(filter: EOFoundation.FilterType)
  func cancelDate()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FilterView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let buttonHolder: EOFoundation.FilterSelector
  @_Concurrency.MainActor(unsafe) final public let container: EOFoundation.FilterBody
  @_Concurrency.MainActor(unsafe) public var currentFilter: EOFoundation.FilterType?
  @_Concurrency.MainActor(unsafe) public init(with selectorData: [(title: Swift.String, icon: Swift.String)])
  @objc deinit
}
extension EOFoundation.FilterView : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
public protocol SessionManagerProtocol {
  typealias SessionStringCompletion = (Swift.String) -> Swift.Void
  typealias SessionBoolCompletion = (Swift.Bool) -> Swift.Void
  typealias SessionResponseCompletion = (EOFoundation.Session.LoginResponse) -> Swift.Void
  typealias SessionValidCompletion = (EOFoundation.Session.SessionValid) -> Swift.Void
  func registerDevice(completion: Self.SessionStringCompletion?)
  func login(with params: EOFoundation.RequestBodyParams, successCompletion: Self.SessionResponseCompletion?, errorCompletion: Self.SessionStringCompletion?)
  func signUp(with params: EOFoundation.RequestBodyParams, completion: @escaping Self.SessionStringCompletion)
  func logout(completion: Self.SessionStringCompletion?)
  func validateUser(with code: Swift.String, completion: @escaping Self.SessionBoolCompletion)
}
public struct User : Swift.Codable {
  public let email: Swift.String?
  public let userId: Swift.Int
  public init(email: Swift.String?, userId: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum OneUserResponse {
  case user(EOFoundation.OneUser)
  case error
}
public struct OneUser : Swift.Codable {
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var email: Swift.String
  public var birthDate: Swift.Double?
  public var lastLoginDate: Swift.Double?
  public var city: Swift.String
  public var houseNumber: Swift.String
  public var salutation: Swift.String
  public var street: Swift.String
  public var zipCode: Swift.String
  public var profileImageUrl: Swift.String
  public var customerNumber: Swift.String
  public var customerRank: Swift.Int?
  public var additionalFields: EOFoundation.AdditionalFields?
  public init(from coder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AdditionalFields : Swift.Codable {
  public var customerIsCardOwner: Swift.Bool?
  @available(*, deprecated, message: "use GET Vehicles call")
  public var licensePlates: [Swift.String]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UserDefaultsUtils {
  @EOFoundation.UserDefaultsProperty public static var showOverlay: Swift.Bool {
    get
    set
    _modify
  }
  public static func save(value: Swift.String, for fieldName: Swift.String, in widgetName: Swift.String)
  public static func delete(for fieldName: Swift.String, in widgetName: Swift.String)
  public static func getValue(for fieldName: Swift.String, in widgetName: Swift.String) -> Swift.String?
}
extension EOFoundation.UserDefaultsUtils {
  public static func save(string: Swift.String, for key: EOFoundation.GlobalConfigs.Strings)
  public static func getString(for key: EOFoundation.GlobalConfigs.Strings) -> Swift.String?
  public static func save<T>(object: T, forKey key: EOFoundation.GlobalConfigs.Objects) where T : Swift.Decodable, T : Swift.Encodable
  public static func save<T>(object: T, for key: Swift.String) where T : Swift.Decodable, T : Swift.Encodable
  public static func load<T>(object: T.Type, forKey key: EOFoundation.GlobalConfigs.Objects) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public static func load<T>(_ objectType: T.Type, for key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public static func delete(forKey key: EOFoundation.GlobalConfigs.Objects)
  public static func delete(forKey key: Swift.String)
}
public struct RegularExpressions {
  public static let img: Swift.String
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TouchDelegatingView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var touchDelegate: UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) final public class EODetailContainerViewController : EOFoundation.EOViewController {
  @_Concurrency.MainActor(unsafe) final public var isCloseButtonVisible: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public var closeHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(manager: EOFoundation.EODetailViewManager)
  @_Concurrency.MainActor(unsafe) public init(manager: EOFoundation.EODetailViewManager, touchView: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension EOFoundation.EODetailContainerViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
}
public protocol AutocompleteViewControllerDelegate : AnyObject {
  func viewController(_ viewController: EOFoundation.AutocompleteViewController, didAutocompleteWith place: EOFoundation.Places.Model.Place)
  func viewController(_ viewController: EOFoundation.AutocompleteViewController, didFailAutocompleteWithError error: Swift.Error)
  func wasCancelled(_ viewController: EOFoundation.AutocompleteViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class AutocompleteViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak final public var autocompleteDelegate: EOFoundation.AutocompleteViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias RequestHeaders = [Swift.String : Swift.String]
public typealias RequestBodyParams = [Swift.String : Any]
public typealias RequestParams = [Swift.String : Swift.String]
public protocol Request {
  var urlString: Swift.String? { get set }
  var url: EOFoundation.Url? { get set }
  var method: EOFoundation.HTTPMethod { get set }
  var headers: EOFoundation.RequestHeaders { get set }
  var bodyParams: EOFoundation.RequestBodyParams { get set }
  var params: EOFoundation.RequestParams { get set }
  var bodyData: Foundation.Data? { get set }
}
extension EOFoundation.Request {
  public var method: EOFoundation.HTTPMethod {
    get
  }
  public var headers: EOFoundation.RequestHeaders {
    get
  }
  public var bodyParams: EOFoundation.RequestBodyParams {
    get
  }
}
public struct HTTPRequest : EOFoundation.Request {
  public var urlString: Swift.String?
  public var url: EOFoundation.Url?
  public var method: EOFoundation.HTTPMethod
  public var headers: EOFoundation.RequestHeaders
  public var params: EOFoundation.RequestParams
  public var bodyParams: EOFoundation.RequestBodyParams
  public var bodyData: Foundation.Data?
  public init(url: EOFoundation.Url, headers: EOFoundation.RequestHeaders = [:], bodyParams: EOFoundation.RequestBodyParams = [:], method: EOFoundation.HTTPMethod = .get, params: EOFoundation.RequestParams = [:])
  public init(url: EOFoundation.Url, headers: EOFoundation.RequestHeaders = [:])
  public init(url: Swift.String, headers: EOFoundation.RequestHeaders = [:], bodyParams: EOFoundation.RequestBodyParams = [:], method: EOFoundation.HTTPMethod = .get, params: EOFoundation.RequestParams = [:])
  public init(url: Swift.String, bodyData: Foundation.Data)
}
extension Foundation.NSMutableData {
  public func append(_ string: Swift.String)
}
extension Swift.Dictionary {
  public var data: Foundation.Data? {
    get
  }
}
public enum ButtonState {
  case primary
  case secondary
  public static func == (a: EOFoundation.ButtonState, b: EOFoundation.ButtonState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ButtonStateType {
  case fillRoundedCorners
  case strokeRoundedCorners
  case transparent
  public static func == (a: EOFoundation.ButtonStateType, b: EOFoundation.ButtonStateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class EOButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @available(*, deprecated, message: "use init(buttonType: ButtonStateType.buttonTitle: String, action: @escaping () -> Void)")
  @_Concurrency.MainActor(unsafe) public init(buttonState: EOFoundation.ButtonState = .primary, title: Swift.String, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public init(buttonType: EOFoundation.ButtonStateType = .fillRoundedCorners, buttonTitle: Swift.String, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setImage(_ image: UIKit.UIImage?, for state: UIKit.UIControl.State)
  @objc deinit
}
public protocol TableSectionProtocol : AnyObject {
  var groups: [EOFoundation.TableGroupProtocol] { get set }
  var numberOfItems: Swift.Int { get }
  var headerTitle: Swift.String? { get }
  var headerView: UIKit.UIView? { get }
  var headerHeight: CoreGraphics.CGFloat? { get }
  var footerTitle: Swift.String? { get }
  var footerView: UIKit.UIView? { get }
  var footerHeight: CoreGraphics.CGFloat? { get }
  func registerCells(for tableView: UIKit.UITableView)
  func cell(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  func handleSelectRow(_ tableView: UIKit.UITableView, at indexPath: Foundation.IndexPath)
  func indexPaths(for group: EOFoundation.TableGroupProtocol, sectionIndex: Swift.Int) -> [Foundation.IndexPath]
}
extension EOFoundation.TableSectionProtocol {
  public var numberOfItems: Swift.Int {
    get
  }
  public var headerTitle: Swift.String? {
    get
  }
  public var headerView: UIKit.UIView? {
    get
  }
  public var headerHeight: CoreGraphics.CGFloat? {
    get
  }
  public var footerTitle: Swift.String? {
    get
  }
  public var footerView: UIKit.UIView? {
    get
  }
  public var footerHeight: CoreGraphics.CGFloat? {
    get
  }
  public func registerCells(for tableView: UIKit.UITableView)
  public func cell(_ tableView: UIKit.UITableView, indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  public func handleSelectRow(_ tableView: UIKit.UITableView, at indexPath: Foundation.IndexPath)
  public func indexPaths(for group: EOFoundation.TableGroupProtocol, sectionIndex: Swift.Int) -> [Foundation.IndexPath]
}
public struct Style : Swift.Codable {
  public let primaryColor: Swift.String
  public let secondaryColor: Swift.String
  public let tertiaryColor: Swift.String?
  public let shadowColor: Swift.String
  public let navBarBackgroundColor: Swift.String
  public let backgroundColors: [Swift.String]
  public let border: EOFoundation.Border
  public let cornerRadius: CoreGraphics.CGFloat
  public let backgroundMedia: EOFoundation.MediaModel?
  public let texts: [EOFoundation.TextStyle]
  public let tile: EOFoundation.TileStyle
  public let tabBar: EOFoundation.TabBar?
  @available(*, deprecated, renamed: "backgroundMedia")
  public let backgroundImageURL: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Border : Swift.Codable {
  public let color: Swift.String
  public let width: CoreGraphics.CGFloat
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TabBar : Swift.Codable {
  public let font: EOFoundation.Font
  public let size: Swift.Int
  public let activeColor: Swift.String?
  public let inactiveColor: Swift.String?
  public let backgroundColors: [Swift.String]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TextStyle : Swift.Codable {
  public let type: EOFoundation.TextStyleType
  public let font: EOFoundation.Font
  public let size: Swift.Int
  public let color: Swift.String?
  public let letterSpacing: Swift.Double?
  public let linesSpacing: Swift.Int?
  public let margin: EOFoundation.MarginStyle?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Font : Swift.Codable {
  public let type: Swift.String
  public let name: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MarginStyle : Swift.Codable {
  public let top: Swift.Int
  public let right: Swift.Int
  public let bottom: Swift.Int
  public let left: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TileStyle : Swift.Codable {
  public let spacing: CoreGraphics.CGFloat
  public let border: EOFoundation.Border
  public let backgroundColors: [Swift.String]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum TextStyleType : Swift.String, Swift.Codable {
  case headline1
  case headline2
  case headline3
  case headline4
  case subline1
  case subline2
  case body
  case note
  case link
  public var style: EOFoundation.TextStyle? {
    get
  }
  public var color: UIKit.UIColor? {
    get
  }
  public var font: UIKit.UIFont {
    get
  }
  public var textStyle: UIKit.UIFont.TextStyle {
    get
  }
  public var attributes: [Foundation.NSAttributedString.Key : Any] {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol StyleProtocol {
  func setStyle(_ styleType: EOFoundation.TextStyleType?)
}
extension UIKit.UILabel : EOFoundation.StyleProtocol {
}
extension EOFoundation.StyleProtocol where Self : UIKit.UILabel {
  public func setStyle(_ styleType: EOFoundation.TextStyleType?)
}
extension UIKit.UITextView : EOFoundation.StyleProtocol {
  @_Concurrency.MainActor(unsafe) public func setStyle(_ styleType: EOFoundation.TextStyleType?)
}
extension UIKit.UITextField : EOFoundation.StyleProtocol {
  @_Concurrency.MainActor(unsafe) public func setStyle(_ styleType: EOFoundation.TextStyleType?)
}
public struct EORadioModel {
  public init(text: Swift.String?, isSelected: Swift.Bool = false)
}
public struct EORadioListModel {
  public var completion: (Swift.String) -> Swift.Void
  public init(headerText: Swift.String?, isEnabled: Swift.Bool, list: [EOFoundation.EORadioModel])
}
public struct GlobalConfigs {
  public enum Strings : Swift.String, EOFoundation.Stringable {
    case baseUrl
    case token
    case firebaseToken
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Objects : Swift.String, EOFoundation.Stringable {
    case sharedStyle
    case defaultCoordinate
    case login
    case user
    case temporaryUser
    case widgetSettings
    case permissionSettings, rejectedPermissions
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Booleans : Swift.String, EOFoundation.Stringable {
    case showOverlay
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Int : Swift.String, EOFoundation.Stringable {
    case reload
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public class GraphQLParser<Configuration, Model> where Configuration : EOFoundation.ContentHubConfiguration, Model : Swift.Decodable, Model : Swift.Encodable {
  public var configuration: Configuration
  public init(configuration: Configuration)
  public func fetch(from url: Swift.String, completion: @escaping (Swift.Result<[Model], Swift.Error>) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class OneItemInfoRowView : EOFoundation.EOTableViewCell {
  @_Concurrency.MainActor(unsafe) final public let leftIcon: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: EOFoundation.EOBodyLabel
  @_Concurrency.MainActor(unsafe) final public let subtitleLabel: EOFoundation.EONoteLabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
extension EOFoundation.OneItemInfoRowView {
  @_Concurrency.MainActor(unsafe) public func fill(model: EOFoundation.OneItemInfoRowModel)
  @available(*, deprecated, message: "use func fill(model: OneItemInfoRowModel)")
  @_Concurrency.MainActor(unsafe) public func fill(model: EOFoundation.OneItemInfoRowModel, date: Swift.String, completion: @escaping (Foundation.Date) -> Swift.Void)
}
public struct MainServiceResponseMapper : Swift.Codable, EOFoundation.Cacheable {
  public let pages: [EOFoundation.Page]
  public let style: EOFoundation.Style
  public let overlays: [EOFoundation.OverlayObject]?
  public let coordinate: EOFoundation.MainServiceResponseMapper.Coordinate?
  public var login: EOFoundation.MainServiceResponseMapper.Login
  public var register: EOFoundation.MainServiceResponseMapper.Register
  public struct Coordinate : Swift.Codable {
    public let latitude: Swift.String, longitude: Swift.String
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public enum LoginType : Swift.String, Swift.Codable {
    case endios
    case external
    case noLogin
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum LoginSubtype : Swift.String, Swift.Codable {
    case sapCDC
    case customer
    case noLoginSubtpye
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RegisterType : Swift.String, Swift.Codable {
    case endios
    case external
    case noLogin
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RegisterSubtype : Swift.String, Swift.Codable {
    case sapCDC
    case customer
    case noLoginSubtpye
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct Login : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct LoginConfig : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Register : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct RegisterConfig : Swift.Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension EOFoundation.MainServiceResponseMapper {
  public func findWidget(for id: Swift.String?) -> EOFoundation.WidgetModel?
  public func findWidget(widgetType: Swift.String) -> EOFoundation.WidgetModel?
}
extension EOFoundation.MainServiceResponseMapper {
  public static let testData: EOFoundation.MainServiceResponseMapper
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var wrappedText: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public func addDoneButtonOnKeyboard()
}
public typealias ButtonIsSelected = (Swift.Bool) -> Swift.Void
public enum EOButtonState {
  case selected
  case unselected
  case hidden
  public static func == (a: EOFoundation.EOButtonState, b: EOFoundation.EOButtonState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ItemLargeBadge {
  public init(badgeText: Swift.String, badgeColor: UIKit.UIColor = Theme.secondaryColor)
}
public protocol ItemLargeCellProtocol {
  var title: Swift.String { get set }
  var image: EOFoundation.MediaContentType { get set }
  var badge: EOFoundation.ItemLargeBadge? { get set }
  var items: [EOFoundation.IconTextModel] { get set }
  var isButtonSelected: EOFoundation.EOButtonState { get set }
  var showBadge: Swift.Bool { get }
}
public struct ItemLargeCellModel : EOFoundation.ItemLargeCellProtocol {
  public var title: Swift.String
  public var image: EOFoundation.MediaContentType
  public var badge: EOFoundation.ItemLargeBadge?
  public var items: [EOFoundation.IconTextModel]
  public var isButtonSelected: EOFoundation.EOButtonState
  public var showBadge: Swift.Bool {
    get
  }
  public init(title: Swift.String, image: EOFoundation.MediaContentType, isButtonSelected: EOFoundation.EOButtonState, items: [EOFoundation.IconTextModel], badge: EOFoundation.ItemLargeBadge? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ItemLargeCellCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension EOFoundation.ItemLargeCellCollectionViewCell {
  @_Concurrency.MainActor(unsafe) public func fill(model: EOFoundation.ItemLargeCellProtocol, completion: EOFoundation.ButtonIsSelected? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ThumbnailGridCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isHighlighted: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var pageNumber: Swift.Int {
    get
    set
  }
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol ReachabilityProtocol {
  var isReachable: Swift.Bool { get }
  func isUrlReachable(url: Foundation.URL) -> Swift.Bool
  var reachability: EOFoundation.Reachability? { get set }
}
@_hasMissingDesignatedInitializers public class ReachabilityManager : EOFoundation.ReachabilityProtocol {
  public var reachability: EOFoundation.Reachability?
  public var isReachable: Swift.Bool {
    get
  }
  public func isUrlReachable(url: Foundation.URL) -> Swift.Bool
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static func initializeSW_CtrlView()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class EOTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension EOFoundation.EOTableViewCell : EOFoundation.Reusable {
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EOLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public init(alignment: UIKit.NSTextAlignment = .center)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class EOHeadline1Label : EOFoundation.EOLabel {
  @_Concurrency.MainActor(unsafe) override public init(alignment: UIKit.NSTextAlignment = .center)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class EOHeadline2Label : EOFoundation.EOLabel {
  @_Concurrency.MainActor(unsafe) override public init(alignment: UIKit.NSTextAlignment = .center)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class EOHeadline3Label : EOFoundation.EOLabel {
  @_Concurrency.MainActor(unsafe) override public init(alignment: UIKit.NSTextAlignment = .center)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class EOHeadline4Label : EOFoundation.EOLabel {
  @_Concurrency.MainActor(unsafe) override public init(alignment: UIKit.NSTextAlignment = .center)
  @_Concurrency.MainActor(unsafe) final public func setText(text: Swift.String?, withKerning kerning: CoreGraphics.CGFloat = 0.15)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class EOSubline1Label : EOFoundation.EOLabel {
  @_Concurrency.MainActor(unsafe) override public init(alignment: UIKit.NSTextAlignment = .center)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class EOSubline2Label : EOFoundation.EOLabel {
  @_Concurrency.MainActor(unsafe) override public init(alignment: UIKit.NSTextAlignment = .center)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class EOBodyLabel : EOFoundation.EOLabel {
  @_Concurrency.MainActor(unsafe) override public init(alignment: UIKit.NSTextAlignment = .center)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class EONoteLabel : EOFoundation.EOLabel {
  @_Concurrency.MainActor(unsafe) override public init(alignment: UIKit.NSTextAlignment = .center)
  @_Concurrency.MainActor(unsafe) final public func setText(text: Swift.String?, withKerning kerning: CoreGraphics.CGFloat = 0.25)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class EOLinkLabel : EOFoundation.EOLabel {
  @_Concurrency.MainActor(unsafe) override public init(alignment: UIKit.NSTextAlignment = .center)
  @objc deinit
}
extension EOFoundation.EOLabel {
  @_Concurrency.MainActor(unsafe) public func setTextSpacingForLabel(text: Swift.String?, withKerning kerning: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setText(text: Swift.String?, kerningModels: [EOFoundation.KerningModel])
}
public struct KerningModel {
  public init(kerning: CoreGraphics.CGFloat, range: Foundation.NSRange)
}
public var isDevice: Swift.Bool {
  get
}
public var isSimulator: Swift.Bool {
  get
}
public var isDebug: Swift.Bool {
  get
}
public var isThreeApp: Swift.Bool {
  get
}
public var isSAPDemoApp: Swift.Bool {
  get
}
extension Swift.Array where Element == CoreGraphics.CGFloat {
  public var sum: CoreGraphics.CGFloat {
    get
  }
}
extension Swift.Array where Element == Swift.String {
  public func toString(separator: Swift.String = "'") -> Swift.String
}
extension Swift.Array where Element : Swift.Hashable {
  public var setValue: Swift.Set<Element> {
    get
  }
  public func difference(from other: [Element]) -> [Element]
}
extension Swift.Array {
  public subscript(safe index: Swift.Array<Element>.Index) -> Element? {
    get
  }
  public subscript(safe subRange: Swift.Range<Swift.Int>) -> Swift.ArraySlice<Element> {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class MainPlaceholderViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class InsettedLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public init(with insets: UIKit.UIEdgeInsets)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func drawText(in rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  @objc deinit
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func updateDisplay()
  @_Concurrency.MainActor(unsafe) public func register<CellClass>(class classType: CellClass.Type) where CellClass : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func register<CellClass>(nib: CellClass.Type) where CellClass : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func dequeue<Cell>(cell: Cell.Type, for indexPath: Foundation.IndexPath) -> Cell where Cell : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func register<HeaderFooterClass>(headerFooterClass: HeaderFooterClass.Type) where HeaderFooterClass : UIKit.UITableViewHeaderFooterView
  @_Concurrency.MainActor(unsafe) public func dequeue<HeaderFooter>(headerFooter: HeaderFooter.Type) -> HeaderFooter where HeaderFooter : UIKit.UITableViewHeaderFooterView
}
extension Swift.Dictionary {
  public mutating func merge<K, V>(dictionaries: Swift.Dictionary<K, V>...) where K : Swift.Hashable
}
public protocol AppCoordinatorProtocol {
  static var window: UIKit.UIWindow? { get set }
  static func moveToMain(reload: Swift.Bool)
  static func showSplashScreen()
}
public struct AppCoordinator : EOFoundation.AppCoordinatorProtocol {
  public static var window: UIKit.UIWindow?
  public static var isInSandbox: Swift.Bool
  public static func moveToMain(reload: Swift.Bool)
  public static func showSplashScreen()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EOSwitchListCell : EOFoundation.EOTableViewCell {
  @objc deinit
}
extension EOFoundation.EOSwitchListCell {
  @_Concurrency.MainActor(unsafe) final public func fill(model: EOFoundation.EOSwitchListModel)
}
extension EOFoundation.EOSwitchListCell : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ContactCell : EOFoundation.BaseContentCell {
  @_Concurrency.MainActor(unsafe) final public let title: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let descriptionLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let collection: EOFoundation.ContactCell.ContactCollection
  @_Concurrency.MainActor(unsafe) open var object: EOFoundation.ContentObject? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func didClickCell()
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ContactCollection : EOFoundation.ClearedBackgroundCollection, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout, MessageUI.MFMailComposeViewControllerDelegate {
    @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
    @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
    @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
    @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
    @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
    @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
    @_Concurrency.MainActor(unsafe) @objc public func mailComposeController(_ controller: MessageUI.MFMailComposeViewController, didFinishWith result: MessageUI.MFMailComposeResult, error: Swift.Error?)
    @objc deinit
  }
  @objc deinit
}
public protocol EODetailedViewMinimumViewProtocol {
  var minimalView: UIKit.UIView { get }
}
public typealias EODetailViewSmallBoxType = EOFoundation.EOView & EOFoundation.EODetailViewBoxProtocol & EOFoundation.EODetailedViewMinimumViewProtocol
public protocol EODetailViewBoxProtocol : UIKit.UIView {
  var hasBackground: Swift.Bool { get }
}
public typealias EODetailViewBoxType = UIKit.UIView & EOFoundation.EODetailViewBoxProtocol
final public class EODetailViewManager {
  public init(coreTile: EOFoundation.EODetailViewSmallBoxType, title: Swift.String, subTitle: Swift.String? = nil)
  public init(coreTile: EOFoundation.EODetailViewSmallBoxType, title: Swift.String, subTitle: Swift.String?, fullScreenOnly: Swift.Bool)
  public init(coreTile: EOFoundation.EODetailViewSmallBoxType, title: Swift.String, subTitle: Swift.String?, startInMaximisedView: Swift.Bool)
  final public func add(tile: EOFoundation.EODetailViewBoxType)
  final public func add(galleryItem: EOFoundation.MediaModel?)
  @objc deinit
}
public protocol BaseContentCellProtocol {
  var object: EOFoundation.ContentObject? { get set }
  func didClickCell()
  func willDismiss()
}
extension EOFoundation.BaseContentCellProtocol {
  public func willDismiss()
}
public protocol EmptyContentDataProtocol : AnyObject {
  func didDetectEmpty(content: EOFoundation.ContentObject?)
}
public typealias BaseContentCell = EOFoundation.BaseContentTableCell & EOFoundation.BaseContentCellProtocol
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BaseContentTableCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) weak public var emptyDataDelegate: EOFoundation.EmptyContentDataProtocol?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class AloeStackView : UIKit.UIScrollView {
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open var axis: UIKit.NSLayoutConstraint.Axis {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func addRow(_ row: UIKit.UIView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func addRows(_ rows: [UIKit.UIView], animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func prependRow(_ row: UIKit.UIView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func prependRows(_ rows: [UIKit.UIView], animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func insertRow(_ row: UIKit.UIView, before beforeRow: UIKit.UIView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func insertRows(_ rows: [UIKit.UIView], before beforeRow: UIKit.UIView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func insertRow(_ row: UIKit.UIView, after afterRow: UIKit.UIView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func insertRows(_ rows: [UIKit.UIView], after afterRow: UIKit.UIView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func removeRow(_ row: UIKit.UIView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func removeRows(_ rows: [UIKit.UIView], animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func removeAllRows(animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open var firstRow: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var lastRow: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor(unsafe) open func getAllRows() -> [UIKit.UIView]
  @_Concurrency.MainActor(unsafe) open func containsRow(_ row: UIKit.UIView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func hideRow(_ row: UIKit.UIView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func hideRows(_ rows: [UIKit.UIView], animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func showRow(_ row: UIKit.UIView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func showRows(_ rows: [UIKit.UIView], animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func setRowHidden(_ row: UIKit.UIView, isHidden: Swift.Bool, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func setRowsHidden(_ rows: [UIKit.UIView], isHidden: Swift.Bool, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func isRowHidden(_ row: UIKit.UIView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func setTapHandler<RowView>(forRow row: RowView, handler: ((RowView) -> Swift.Void)?) where RowView : UIKit.UIView
  @_Concurrency.MainActor(unsafe) open var rowBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) open var rowHighlightColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) open func setBackgroundColor(forRow row: UIKit.UIView, color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) open func setBackgroundColor(forRows rows: [UIKit.UIView], color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) open var rowInset: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) open func setInset(forRow row: UIKit.UIView, inset: UIKit.UIEdgeInsets)
  @_Concurrency.MainActor(unsafe) open func setInset(forRows rows: [UIKit.UIView], inset: UIKit.UIEdgeInsets)
  @_Concurrency.MainActor(unsafe) open var separatorColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var separatorWidth: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var separatorHeight: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var separatorInset: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) open func setSeparatorInset(forRow row: UIKit.UIView, inset: UIKit.UIEdgeInsets)
  @_Concurrency.MainActor(unsafe) open func setSeparatorInset(forRows rows: [UIKit.UIView], inset: UIKit.UIEdgeInsets)
  @_Concurrency.MainActor(unsafe) open var hidesSeparatorsByDefault: Swift.Bool
  @_Concurrency.MainActor(unsafe) open func hideSeparator(forRow row: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) open func hideSeparators(forRows rows: [UIKit.UIView])
  @_Concurrency.MainActor(unsafe) open func showSeparator(forRow row: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) open func showSeparators(forRows rows: [UIKit.UIView])
  @_Concurrency.MainActor(unsafe) open var automaticallyHidesLastSeparator: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func scrollRowToVisible(_ row: UIKit.UIView, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) open func cellForRow(_ row: UIKit.UIView) -> EOFoundation.StackViewCell
  @_Concurrency.MainActor(unsafe) open func configureCell(_ cell: EOFoundation.StackViewCell)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class GalleryContentCell : EOFoundation.BaseContentCell, UIKit.UICollectionViewDelegateFlowLayout, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) final public let holder: EOFoundation.GradientOpacView
  @_Concurrency.MainActor(unsafe) final public let header: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let collection: EOFoundation.ClearedBackgroundCollection
  @_Concurrency.MainActor(unsafe) open var object: EOFoundation.ContentObject? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CollectionCell : UIKit.UICollectionViewCell {
    @_Concurrency.MainActor(unsafe) final public let mainMedia: EOFoundation.MediaView
    @_Concurrency.MainActor(unsafe) public var widget: EOFoundation.WidgetModel?
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
    @_Concurrency.MainActor(unsafe) open func setuplyout()
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @objc deinit
  }
  @_Concurrency.MainActor(unsafe) public func didClickCell()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EOCircleImageView : EOFoundation.EOView {
  @_Concurrency.MainActor(unsafe) public func setImage(image: UIKit.UIImage?)
  @objc deinit
}
public struct PDFCollectionItemV2 : EOFoundation.PDFURLProvider {
  public var title: Swift.String
  public var subtitle: Swift.String
  public var headline: Swift.String
  public var description: Swift.String
  public var pdfData: Foundation.Data?
  public var pdfURL: Swift.String?
  public var imageURL: Swift.String?
  public var cellTitle: Swift.String?
  public var cellTip: Swift.String?
  public init(title: Swift.String, subtitle: Swift.String, headline: Swift.String, description: Swift.String, pdfData: Foundation.Data?, pdfURL: Swift.String?, imageURL: Swift.String? = nil, cellTitle: Swift.String? = nil, cellTip: Swift.String? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PDFCollectionControllerV2 : EOFoundation.EOViewController {
  @_Concurrency.MainActor(unsafe) public var bottomButton: EOFoundation.EOButton?
  @_Concurrency.MainActor(unsafe) open var data: [EOFoundation.PDFCollectionItemV2] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedIndex: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) public var onItemClicked: ((Swift.Int) -> ())?
  @_Concurrency.MainActor(unsafe) public var noDataViewVisible: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var noDataText: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func showAll()
  @_Concurrency.MainActor(unsafe) public func startLoadingAnimation()
  @_Concurrency.MainActor(unsafe) public func stopLoadingAnimation()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc override dynamic public init()
  @objc deinit
}
extension EOFoundation.PDFCollectionControllerV2 : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension EOFoundation.PDFCollectionControllerV2 : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
}
@_inheritsConvenienceInitializers public class OverlayCoreData : EOFoundation.CoreDataTemplate<EOFoundation.OverlayCacheObject> {
  public static let shared: EOFoundation.OverlayCoreData
  public func loadOverlayCache(with id: Swift.Int) -> EOFoundation.OverlayCoreData.CoreDataObjectType?
  override public init()
  @objc deinit
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case patch
  case put
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias PersistanceObject = CoreData.NSManagedObject
open class CoreDataTemplate<ObjectType> where ObjectType : CoreData.NSManagedObject {
  public typealias CoreDataObjectType = ObjectType?
  final public let entityName: Swift.String
  public var container: CoreData.NSPersistentContainer? {
    get
    set
  }
  public init()
  open func selectObjects(predicate: Foundation.NSPredicate? = nil, sortDescriptor: [Foundation.NSSortDescriptor]? = nil) -> [ObjectType]?
  open func insert(id: Swift.Int) -> ObjectType?
  open func get(id: Swift.Int) -> ObjectType?
  open func createMO(withEntity: Swift.String?) -> CoreData.NSManagedObject?
  open func getOrCreateMOFromField(withEntity: Swift.String?, searchField: Swift.String?, searchValue: Swift.AnyObject?) -> CoreData.NSManagedObject?
  open func getMOFromField(withEntity: Swift.String?, searchField: Swift.String?, searchValue: Swift.AnyObject?) -> CoreData.NSManagedObject?
  open func getMOFormPredicate(withEntity: Swift.String?, predicate: Foundation.NSPredicate?) -> CoreData.NSManagedObject?
  open func getMOs(withEntity: Swift.String?, predicate: Foundation.NSPredicate?) -> [CoreData.NSManagedObject]?
  open func registerForAppEvents()
  @objc public func applicationWillTerminateNotification(notification: Foundation.NSNotification)
  open func saveContext()
  @objc deinit
}
public protocol SettingType : Swift.Decodable, Swift.Encodable {
}
extension EOFoundation.AppSettings {
  public struct Model {
    public typealias StoreResponseMapper = [EOFoundation.AppSettings.Model.WidgetSetting]
    public struct WidgetSetting : Swift.Codable {
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
  }
}
extension EOFoundation.SettingType {
  public var stringData: Swift.String? {
    get
  }
}
extension Swift.Array where Element == EOFoundation.AppSettings.Model.WidgetSetting {
  public var data: [Swift.Int : Swift.String] {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class OfferCell : EOFoundation.DetailsCell {
  @_Concurrency.MainActor(unsafe) override open func loadSecondIcon()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EODateTextFieldCell : EOFoundation.EOTableViewCell {
  @_Concurrency.MainActor(unsafe) final public let textField: EOFoundation.EOTextField
  @objc deinit
}
extension EOFoundation.EODateTextFieldCell {
  @_Concurrency.MainActor(unsafe) final public func fill(model: EOFoundation.EODateTextFieldCellModel)
}
public enum InfoViewCellType {
  case verticalSpacing(CoreGraphics.CGFloat)
  case header(EOFoundation.InfoViewHeaderModel)
  case mainImage(EOFoundation.InfoViewImageModel)
  case bodyText(EOFoundation.InfoViewBodyTextModel)
  case listItem(EOFoundation.OneItemInfoRowModel)
}
public struct InfoViewModel {
  public var backgroundColor: UIKit.UIColor?
  public var backButtonTitle: Swift.String?
  public var mainButtons: [EOFoundation.EOButton] {
    get
    set
  }
  public var navigationTitle: Swift.String?
  public var appPaddingMultiplier: CoreGraphics.CGFloat
  public init(data: [EOFoundation.InfoViewCellType], navigationTitle: Swift.String?, showCloseButton: Swift.Bool = false)
}
extension EOFoundation.PdfViewWidgetControllerType {
  @_Concurrency.MainActor(unsafe) public static func create(with url: Swift.String, title: Swift.String?) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) final public func setup(with url: Swift.String, title: Swift.String?)
  @_Concurrency.MainActor(unsafe) public static func create(from fileName: Swift.String, title: Swift.String?) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) final public func setup(from fileName: Swift.String, title: Swift.String?)
}
extension UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) convenience public init(views: [UIKit.UIView], axis: UIKit.NSLayoutConstraint.Axis, distribution: UIKit.UIStackView.Distribution, alignment: UIKit.UIStackView.Alignment, spacing: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) public func animateBlock(changes: @escaping () -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addArranged(_ subview: UIKit.UIView) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func addSpace(_ space: CoreGraphics.CGFloat) -> Self
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static var reuseIdentifier: Swift.String {
    get
  }
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func loadFrom(url: Swift.String?, with placeHolderImage: UIKit.UIImage? = UIImage(named: "defaultImage", in: bundle(), compatibleWith: nil), placeHolderImageUrl: Swift.String? = nil, withRendering: Swift.Bool = false, isDefaultAllowed: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func set(image: UIKit.UIImage?, isAnimated: Swift.Bool = true, withRendering: Swift.Bool = false)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BaseTabbedBarController : UIKit.UITabBarController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var viewControllers: [UIKit.UIViewController]? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MainViewController : EOFoundation.BaseTabbedBarController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tabBar(_ tabBar: UIKit.UITabBar, didSelect item: UIKit.UITabBarItem)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ThumbnailGridViewController : UIKit.UICollectionViewController, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) final public var pdfDocument: PDFKit.PDFDocument?
  @_Concurrency.MainActor(unsafe) final public let thumbnailCache: Foundation.NSCache<Foundation.NSNumber, UIKit.UIImage>
  @_Concurrency.MainActor(unsafe) final public var cellSize: CoreGraphics.CGSize {
    get
  }
  @_Concurrency.MainActor(unsafe) final public func reload()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc override final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol ThumbnailGridViewControllerDelegate : AnyObject {
  func thumbnailGridViewController(_ thumbnailGridViewController: EOFoundation.ThumbnailGridViewController, didSelectPage page: PDFKit.PDFPage)
}
extension EOFoundation.Stringable {
  public func appending(_ string: EOFoundation.Stringable) -> Swift.String
  public func appending(_ string: Swift.String) -> Swift.String
  public var localized: Swift.String {
    get
  }
  public func localized(in bundle: Foundation.Bundle = Bundle.main) -> Swift.String
  public func localized(in bundle: Foundation.Bundle = Bundle.main, dictionnary: [Swift.String : Swift.String]) -> Swift.String
}
extension Swift.String {
  public var localized: Swift.String {
    get
  }
  public func localized(in bundle: Foundation.Bundle = Bundle.main) -> Swift.String
  public func localized(in bundle: Foundation.Bundle = Bundle.main, dictionnary: [Swift.String : Swift.String]) -> Swift.String
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class EventCell : EOFoundation.DetailsCell {
  @_Concurrency.MainActor(unsafe) override public func didClickCell()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DataManager {
  public static func errorMessageFor(data: Foundation.Data?) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class InfoViewHeaderCell : EOFoundation.EOTableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
extension EOFoundation.InfoViewHeaderCell {
  @_Concurrency.MainActor(unsafe) public func fill(model: EOFoundation.InfoViewHeaderModel)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EODetailGalleryItemsView : EOFoundation.EOView & EOFoundation.EODetailViewBoxProtocol, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) public var hasBackground: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(galleryItems: [EOFoundation.MediaModel], title: Swift.String? = nil, delegate: EOFoundation.EOGalleryItemsViewDelegate)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc deinit
}
extension EOFoundation.EODetailGalleryItemsView : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension EOFoundation.EODetailGalleryItemsView : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
public protocol EOGalleryItemsViewDelegate : AnyObject {
  func didSelectGalleryItemModel(model: EOFoundation.MediaModel)
}
extension EOFoundation.Application {
  public static func startLoading()
  public static func stopLoading()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class AppearanceViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) final public func sliderValueChanged(_ sender: UIKit.UISlider)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class GeocodingManager {
  public init()
  final public func userLocationAddress(completion: @escaping (Swift.String?) -> Swift.Void)
  final public func getAddressFromLatLon(location: CoreLocation.CLLocationCoordinate2D, completion: @escaping (Swift.String?) -> Swift.Void)
  final public func getCityNameFromLatLon(location: CoreLocation.CLLocationCoordinate2D, completion: @escaping (Swift.String?) -> Swift.Void)
  final public func getLocation(from adress: Swift.String, completion: @escaping (CoreLocation.CLLocationCoordinate2D?, Swift.Error?) -> Swift.Void)
  @objc deinit
}
public protocol NotificatorProtocol {
  static func register(_ observer: Any, selector: ObjectiveC.Selector, name: Foundation.NSNotification.Name?, object: Any?)
  static func post(name: Foundation.NSNotification.Name, object: Any?, userInfo: [Swift.AnyHashable : Any]?)
}
extension EOFoundation.NotificatorProtocol {
  public static func register(_ observer: Any, selector: ObjectiveC.Selector, name: Foundation.NSNotification.Name?, object: Any? = nil)
  public static func post(name: Foundation.NSNotification.Name, object: Any? = nil, userInfo: [Swift.AnyHashable : Any]? = nil)
}
extension UIKit.UIColor {
  convenience public init(hexString: Swift.String)
  public class var random: UIKit.UIColor {
    get
  }
  public static var placeholder: UIKit.UIColor {
    get
  }
}
public struct Page : Swift.Codable {
  public let id: Swift.Int
  public let widgets: [EOFoundation.WidgetModel]
  public let name: Swift.String
  public let icon: Swift.String
  public let ordering: Swift.Int
  public let overlays: [EOFoundation.OverlayObject]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class OverlayObject : ObjectiveC.NSObject, Swift.Codable {
  final public let id: Swift.Int
  public var lastUpdate: Foundation.Date?
  final public let name: Swift.String, image: Swift.String, url: Swift.String
  final public let urlText: Swift.String, buttonText: Swift.String
  public var checkboxes: [EOFoundation.CheckBoxItem]?
  final public let showCount: Swift.Int16
  final public let timestampFrom: Swift.Double?, timestampTo: Swift.Double?
  final public let displayOrder: Swift.Int
  final public let overlayDescription: Swift.String
  public var isValid: Swift.Bool {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class CheckBoxItem : ObjectiveC.NSObject, Swift.Codable {
  final public let id: Swift.Int
  final public let text: Swift.String, url: Swift.String, urlText: Swift.String
  final public let required: Swift.Bool
  public var isChecked: Swift.Bool?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(OverlayCacheObject) public class OverlayCacheObject : EOFoundation.PersistanceObject {
  @objc @NSManaged dynamic public var id: Swift.Int {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var numberOfShows: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension EOFoundation.Places.Model {
  public struct Search {
    public enum QueryDataType {
      case all
      case loadMore
      public static func == (a: EOFoundation.Places.Model.Search.QueryDataType, b: EOFoundation.Places.Model.Search.QueryDataType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct SearchQuery {
      public var location: CoreLocation.CLLocationCoordinate2D?
      public let rankby: Swift.String
      public var sensor: Swift.Bool
      public var types: [Swift.String]
      public var keyword: Swift.String?
      public var pagetoken: Swift.String?
      public init(keyWord: Swift.String, location: CoreLocation.CLLocationCoordinate2D? = Places.Manager.userCoordinate())
      public init(types: [Swift.String], location: CoreLocation.CLLocationCoordinate2D? = Places.Manager.userCoordinate())
    }
    public struct ResponseMapper : Swift.Codable {
      public let nextPageToken: Swift.String?
      public let results: [EOFoundation.Places.Model.Search.SearchPlace]
      public let status: Swift.String
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct SearchPlace : Swift.Codable, Swift.Hashable, EOFoundation.ContentProtocol {
      public func getTitle() -> Swift.String
      public static func == (lhs: EOFoundation.Places.Model.Search.SearchPlace, rhs: EOFoundation.Places.Model.Search.SearchPlace) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public let geometry: EOFoundation.Places.Model.Search.Geometry
      public let icon: Swift.String
      public let name: Swift.String
      public let openingHours: EOFoundation.Places.Model.Search.OpeningHours?
      public let placeID: Swift.String
      public let reference: Swift.String
      public let scope: Swift.String
      public let types: [Swift.String]?
      public let vicinity: Swift.String
      public let rating: Swift.Double?
      public let userRatingsTotal: Swift.Int?
      public let photos: [EOFoundation.Places.Model.Photo]?
      public let priceLevel: Swift.Int?
      public func getContent(completion: @escaping ([EOFoundation.ContentObject]) -> Swift.Void)
      public func getContent() -> [EOFoundation.ContentObject]
      public func getLocation() -> CoreLocation.CLLocationCoordinate2D?
      public func encode(to encoder: Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Geometry : Swift.Codable {
      public let location: EOFoundation.Places.Model.Search.PlaceLocation
      public let viewport: EOFoundation.Places.Model.Search.Viewport
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct PlaceLocation : Swift.Codable {
      public let lat: Swift.Double, lng: Swift.Double
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Viewport : Swift.Codable {
      public let northeast: EOFoundation.Places.Model.Search.PlaceLocation, southwest: EOFoundation.Places.Model.Search.PlaceLocation
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct OpeningHours : Swift.Codable {
      public let openNow: Swift.Bool?
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct PlusCode : Swift.Codable {
      public let compoundCode: Swift.String, globalCode: Swift.String
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
  }
}
public protocol Stringable {
  var rawValue: Swift.String { get }
  func image(from bundle: Foundation.Bundle, rederingMode: UIKit.UIImage.RenderingMode) -> UIKit.UIImage?
}
extension EOFoundation.Stringable {
  public func image(from bundle: Foundation.Bundle = .main, rederingMode: UIKit.UIImage.RenderingMode = .alwaysTemplate) -> UIKit.UIImage?
}
@objc @_Concurrency.MainActor(unsafe) open class DetailedListTableView : UIKit.UITableView, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) open var itemsList: [EOFoundation.ListItem]? {
    get
    set
  }
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc deinit
}
public protocol ListSmallIconTableViewCellProtocol {
  var headline: Swift.String { get set }
  var subline: Swift.String { get set }
  var detailSmall: Swift.String? { get set }
  var detailBig: Swift.String? { get set }
  var helperTextTop: Swift.String? { get set }
  var helperTextBottom: Swift.String? { get set }
  var icon: EOFoundation.MediaContentType { get set }
  var backgroundImage: EOFoundation.MediaContentType? { get set }
}
public struct ListSmallIconTableViewCellModel : EOFoundation.ListSmallIconTableViewCellProtocol {
  public var headline: Swift.String
  public var subline: Swift.String
  public var detailSmall: Swift.String?
  public var detailBig: Swift.String?
  public var helperTextTop: Swift.String?
  public var helperTextBottom: Swift.String?
  public var icon: EOFoundation.MediaContentType
  public var backgroundImage: EOFoundation.MediaContentType?
  public init(headline: Swift.String, subline: Swift.String, detailSmall: Swift.String?, detailBig: Swift.String?, helperTextTop: Swift.String?, helperTextBottom: Swift.String?, icon: EOFoundation.MediaContentType, backgroundImage: EOFoundation.MediaContentType?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ListSmallIconTableViewCell : UIKit.UITableViewCell {
  @objc deinit
}
extension EOFoundation.ListSmallIconTableViewCell {
  @_Concurrency.MainActor(unsafe) public func fill(with modelProtocol: EOFoundation.ListSmallIconTableViewCellProtocol)
}
@propertyWrapper public struct UserDefaultsProperty<X> where X : Swift.Decodable, X : Swift.Encodable {
  public init(userDefaultsKey: Swift.String, initalValue: X)
  public var wrappedValue: X {
    get
    set
  }
}
public protocol BottomSheetDialogCustomViewDelegate : AnyObject {
  func didSelectIndexPath(indexPath: Foundation.IndexPath)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BottomSheetDialogCustomView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(data: [EOFoundation.FilterBottomSheetSection])
  @objc deinit
}
extension EOFoundation.BottomSheetDialogCustomView : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class DefaultDisclosureIndicator : UIKit.UIView {
  @objc dynamic public init()
  @objc deinit
}
public struct DefaultTableViewCellModel {
  public enum LeftImage {
    case url(Swift.String)
    case name(systemName: Swift.String?, bundleName: Swift.String, bundle: Foundation.Bundle?)
  }
  public enum AccessoryViewType {
    case disclosure
    case custom(UIKit.UIView)
  }
  public let title: Swift.String
  public let subtitle: Swift.String
  public let leftImage: EOFoundation.DefaultTableViewCellModel.LeftImage
  public let accessoryView: EOFoundation.DefaultTableViewCellModel.AccessoryViewType?
  public init(title: Swift.String, subtitle: Swift.String = "", leftImage: EOFoundation.DefaultTableViewCellModel.LeftImage, accessoryView: EOFoundation.DefaultTableViewCellModel.AccessoryViewType? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DefaultTableViewCell : UIKit.UITableViewCell {
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class LeftImageView : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
      get
      set
    }
    @objc dynamic public init()
    @_Concurrency.MainActor(unsafe) final public func loadFrom(url: Swift.String)
    @objc deinit
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func configure(with model: EOFoundation.DefaultTableViewCellModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FilterSelector : UIKit.UIView, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) final public let collection: UIKit.UICollectionView
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc deinit
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) convenience public init(modal viewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) public func remove(controller: UIKit.UIViewController)
}
extension EOFoundation.WidgetModel {
  public func value(for key: Swift.String) -> EOFoundation.Value
  public func string(for key: EOFoundation.Stringable) -> Swift.String
  public func double(for key: EOFoundation.Stringable) -> Swift.Double?
  public func bool(for key: EOFoundation.Stringable) -> Swift.Bool
  public func value(for key: EOFoundation.WidgetModel.Keys) -> EOFoundation.Value
  public func value(for key: EOFoundation.Stringable) -> EOFoundation.Value
  public func values(contains key: Swift.String, excluding rangeToExclude: Swift.String) -> [EOFoundation.ConfigurationValue]
  public func values(contains keyStart: Swift.String, _ keyEnd: Swift.String) -> [EOFoundation.ConfigurationValue]
  public func values(contains key: Swift.String) -> [EOFoundation.ConfigurationValue]
  public func values(contains key: EOFoundation.Stringable) -> [EOFoundation.ConfigurationValue]
  public var defaultImageString: Swift.String {
    get
  }
  public var url: Swift.String {
    get
  }
  public var title: Swift.String {
    get
  }
  public var tileTitle: Swift.String {
    get
  }
  public var icon: Swift.String {
    get
  }
  public var image: Swift.String {
    get
  }
  public var defaultImageUrl: Swift.String {
    get
  }
  public var link: Swift.String {
    get
  }
  public var isLoginRequired: Swift.Bool {
    get
  }
}
extension Foundation.Data {
  public func convert<T>(to type: T.Type) -> T? where T : Swift.Decodable, T : Swift.Encodable
}
public struct MultipleRSSMapper : Swift.Codable {
  public let lastBuildDate: Swift.String?, requestDate: Swift.String?
  public let entries: [EOFoundation.JsonFeedObject]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct JsonFeedObject : EOFoundation.NewsFeedModel, Swift.Codable {
  public let feedTitle: Swift.String?
  public let feedOriginalTitle: Swift.String?
  public let feedLink: Swift.String?
  public let feedType: Swift.String?
  public let feedIcon: Swift.String?
  public let title: Swift.String?, description: Swift.String?
  public var link: Swift.String
  public let pictureUrl: Swift.String?
  public let pubDate: Swift.Double?
  public let enclosures: [EOFoundation.Enclosure]?
  public let socialMedia: [EOFoundation.SocialMediaModel]
  public let feedImage: Swift.String
  public var feedIconUrl: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Enclosure : Swift.Codable {
  public let url: Swift.String
  public let type: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension EOFoundation.JsonFeedObject : EOFoundation.ContentProtocol {
  public func getContent() -> [EOFoundation.ContentObject]
  public func getLocation() -> CoreLocation.CLLocationCoordinate2D?
  public func getTitle() -> Swift.String
}
public enum AppIcons : Swift.String, EOFoundation.Iconnable {
  case menuChevron
  case info
  case locate
  case map
  case maphybrid
  case satellite
  case back
  case defaultImage
  public enum Navigation : Swift.String, EOFoundation.Iconnable {
    case action
    case add
    case bookmark
    case camera
    case compose
    case fastForward
    case organize
    case pause
    case play
    case refresh
    case reply
    case rewind
    case search
    case stop
    case trash
    case forwardArrow
    case backwardArrow
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum QuickActions : Swift.String, EOFoundation.Iconnable {
    case add
    case alarm
    case audio
    case bookmark
    case capturePhoto
    case captureVideo
    case cloud
    case compose
    case confirmation
    case contact
    case date
    case favorite
    case home
    case invitation
    case location
    case love
    case mail
    case markLocation
    case message
    case pause
    case play
    case prohibit
    case search
    case share
    case shuffle
    case task
    case taskCompleted
    case time
    case update
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum TabBar : Swift.String, EOFoundation.Iconnable {
    case bookMark
    case contacts
    case downloads
    case favorite
    case featured
    case history
    case more
    case mostRecent
    case mostViewed
    case search
    case topRated
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Iconnable {
  var rawValue: Swift.String { get }
  func getImage(withRendering: Swift.Bool) -> UIKit.UIImage?
}
extension EOFoundation.Iconnable {
  public func getImage(withRendering: Swift.Bool = true) -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class DetailsCell : EOFoundation.BaseContentCell {
  @_Concurrency.MainActor(unsafe) open var object: EOFoundation.ContentObject? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let contentStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public let detailsContent: EOFoundation.GradientOpacView
  @_Concurrency.MainActor(unsafe) final public let dateHolder: EOFoundation.IconLabel
  @_Concurrency.MainActor(unsafe) final public let titleLabel: EOFoundation.EOHeadline3Label
  @_Concurrency.MainActor(unsafe) final public let subtitleLabel: EOFoundation.EOSubline2Label
  @_Concurrency.MainActor(unsafe) final public let hourHolder: EOFoundation.IconLabel
  @_Concurrency.MainActor(unsafe) final public let addressHolder: EOFoundation.IconLabel
  @_Concurrency.MainActor(unsafe) final public let calendarStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public let calendarButton: EOFoundation.CenteredIconLabel
  @_Concurrency.MainActor(unsafe) open func loadIcons()
  @_Concurrency.MainActor(unsafe) open func loadSecondIcon()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setupDetailsHolder()
  @_Concurrency.MainActor(unsafe) public func didClickCell()
  @objc deinit
}
public typealias ButtonPressed = (Foundation.Date?) -> Swift.Void
public struct EODatePickerModel {
  public init(rightButtonText: Swift.String, leftButtonText: Swift.String)
  public init(rightButtonText: Swift.String, leftButtonText: Swift.String, minimumDate: Foundation.Date?, maximumDate: Foundation.Date?)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EODatePicker : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let datePicker: UIKit.UIDatePicker
  @_Concurrency.MainActor(unsafe) final public var date: Foundation.Date? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var datePickerMode: UIKit.UIDatePicker.Mode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(model: EOFoundation.EODatePickerModel)
  @objc deinit
}
extension EOFoundation.EODatePicker {
  @_Concurrency.MainActor(unsafe) final public func rightButtonAction(rightButtonAction: @escaping EOFoundation.ButtonPressed)
  @_Concurrency.MainActor(unsafe) final public func leftButtonAction(leftButtonAction: @escaping EOFoundation.ButtonPressed)
  @_Concurrency.MainActor(unsafe) final public func addTarget(_ target: Any?, action: ObjectiveC.Selector, for controlEvents: UIKit.UIControl.Event)
}
public struct Frame {
}
public protocol FrameDelegate : AnyObject {
  func getRect(from frame: EOFoundation.Frame) -> CoreGraphics.CGRect
}
extension EOFoundation.WidgetCollectionViewLayout : EOFoundation.FrameDelegate {
  @_Concurrency.MainActor(unsafe) public func getRect(from frame: EOFoundation.Frame) -> CoreGraphics.CGRect
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class WidgetCollectionViewLayout : UIKit.UICollectionViewLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var collectionViewContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc deinit
}
final public class NewsServiceConfig : EOFoundation.ContentHubConfiguration {
  final public let name: Swift.String
  final public var pageToLoad: Swift.Int
  final public let selectionParams: Swift.String
  final public let widgetID: Swift.Int
  final public let numberOfItems: Swift.Int
  final public var urlString: Swift.String
  public init(widget: EOFoundation.WidgetModel)
  public init(widgetID: Swift.Int, numberOfItems: Swift.Int)
  @objc deinit
}
extension Foundation.Calendar {
  public func midnight(of date: Foundation.Date) -> Foundation.Date?
  public func days(between firstDate: Foundation.Date, and secondDate: Foundation.Date) -> Swift.Int?
  public func months(_ amount: Swift.Int, from date: Foundation.Date) -> Foundation.Date?
  public func dayInYear(from date: Foundation.Date) -> Swift.Int
  public func daysInYear(from date: Foundation.Date) -> Swift.Int
  public func dayInYear(from date: Foundation.Date, since startDate: Foundation.Date) -> Swift.Int
}
extension Foundation.Date {
  public var year: Swift.Int {
    get
  }
  public var month: Swift.Int {
    get
  }
  public var day: Swift.Int {
    get
  }
  public var daysInMonth: [Swift.Int] {
    get
  }
  public var isToday: Swift.Bool {
    get
  }
}
public enum MediaViewType : Swift.String, Swift.Codable {
  case video
  case image
  case link
  case audio
  case pdf
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MediaModel : Swift.Codable {
  public let id: Swift.Int?
  public let mediaType: EOFoundation.MediaViewType?
  public let url: Swift.String?
  public var defaultImageUrl: Swift.String?
  public var imageData: Foundation.Data?
  public init(mediaType: EOFoundation.MediaViewType, url: Swift.String?, defaultImageUrl: Swift.String? = nil)
  public init(imageData: Foundation.Data)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SocialMediaModel : Swift.Codable {
  public let socialMediaType: EOFoundation.ContactType
  public let socialMediaUrl: Swift.String
  public var displayText: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ContentContactModel : Swift.Codable {
  public var title: Swift.String?
  public var contactType: Swift.String
  public var contactInfo: Swift.String
  @available(*, deprecated, renamed: "title")
  public var displayText: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_Concurrency.MainActor(unsafe) open class MediaView : UIKit.UICollectionView, UIKit.UICollectionViewDelegateFlowLayout, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) public var isDefaultAllowed: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var model: EOFoundation.MediaModel? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(isDefaultAllowed: Swift.Bool = true)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc deinit
}
extension EOFoundation.Places.Model.Photo {
  public func imageUrl(for size: CoreGraphics.CGSize) -> Swift.String
  public func imageUrl(for width: CoreGraphics.CGFloat) -> Swift.String
}
extension EOFoundation.Places.Model.Place : EOFoundation.ContentProtocol {
  public func getLocation() -> CoreLocation.CLLocationCoordinate2D?
  public func getTitle() -> Swift.String
  public func getContent() -> [EOFoundation.ContentObject]
}
public struct EOBottomSheetCustomItem {
  public init(title: Swift.String, subtitle: Swift.String?, image: EOFoundation.MediaContentType, isSelected: Swift.Bool?)
}
public struct EOBottomSheetTextFieldItem {
  public init(text: Swift.String? = nil, placeholder: Swift.String? = nil, textFieldType: EOFoundation.TextFieldType = .standard)
}
public struct EOBottomSheetDialogModel {
  public init(title: Swift.String, descriptionText: Swift.String, buttons: [EOFoundation.EOButton] = [], style: EOFoundation.EOBottomSheetDialogButtonStyle = .vertical)
}
public enum EOBottomSheetDialogButtonStyle {
  case vertical
  case horizontal
  public static func == (a: EOFoundation.EOBottomSheetDialogButtonStyle, b: EOFoundation.EOBottomSheetDialogButtonStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class EOBottomSheetDialogManager {
  public init(customView: UIKit.UIView)
  public init(delegate: EOFoundation.BottomSheetDialogCustomViewDelegate? = nil, radioButtons: [EOFoundation.EOBottomSheetCustomItem] = [])
  public init(delegate: EOFoundation.BottomSheetDialogCustomViewDelegate? = nil, checkBoxes: [EOFoundation.EOBottomSheetCustomItem] = [])
  public init(delegate: EOFoundation.BottomSheetDialogCustomViewDelegate? = nil, listItems: [EOFoundation.EOBottomSheetCustomItem] = [])
  public init(forTextField textFieldItem: EOFoundation.EOBottomSheetTextFieldItem, textDelegate: EOFoundation.BottomSheetDialogTextFieldViewDelegate? = nil)
  final public func showBottomSheet(model: EOFoundation.EOBottomSheetDialogModel)
  final public func removeBottomSheet()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LocationManager : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  public static let manager: CoreLocation.CLLocationManager
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PermissionManager : ObjectiveC.NSObject {
  public var requestLimit: Swift.Int
  public var limitedTypes: [EOFoundation.PermissionType]
  public var rejectedTypes: [EOFoundation.PermissionType]
  public var locationCompletion: EOFoundation.PermissionsCompletion?
  public var permissionsRequests: [EOFoundation.PermissionType : Swift.Int]
  public func commitRejectedTypes()
  public func commitPermissionSettings()
  @objc deinit
}
public typealias PermissionsCompletion = (Swift.Bool, Swift.Error?) -> Swift.Void
public struct PermissionObject : Swift.Codable {
  public let picture: Swift.String
  public let text: Swift.String
  public init(picture: Swift.String, text: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum PermissionType : Swift.String, Swift.Codable, EOFoundation.Stringable {
  case camera
  case location
  case calendar
  case pushNotifications
  case microfone
  case events
  case tracking
  public var defaultImage: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension EOFoundation.PermissionManager {
  @available(*, deprecated, message: "use other request access")
  public func requestAccess(to type: EOFoundation.PermissionType, object: EOFoundation.PermissionObject?, isForced: Swift.Bool = false, completion: EOFoundation.PermissionsCompletion? = nil)
  public func requestAccess(to type: EOFoundation.PermissionType, completion: EOFoundation.PermissionsCompletion? = nil)
}
extension EOFoundation.PermissionManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class SearchViewController : UIKit.UITableViewController, UIKit.UISearchBarDelegate, PDFKit.PDFDocumentDelegate {
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc final public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc final public func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
  @_Concurrency.MainActor(unsafe) @objc final public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc final public func didMatchString(_ instance: PDFKit.PDFSelection)
  @_Concurrency.MainActor(unsafe) @objc override final public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override final public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol SearchViewControllerDelegate : AnyObject {
  func searchViewController(_ searchViewController: EOFoundation.SearchViewController, didSelectSearchResult selection: PDFKit.PDFSelection)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class VariantsCollectionView : EOFoundation.ClearedBackgroundCollection, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) public var widget: EOFoundation.WidgetModel?
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public func setup(tiles: [Swift.String : EOFoundation.WidgetVariantCollectionCell.Type], widget: EOFoundation.WidgetModel)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func register(_ nib: UIKit.UINib?, forCellWithReuseIdentifier identifier: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func register(_ cellClass: Swift.AnyClass?, forCellWithReuseIdentifier identifier: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ClearedBackgroundCollection : UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ClearedBackgroundTableView : UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol StartEndTimeDateProtocol {
  var startTime: Swift.Int { get }
  var endTime: Swift.Int { get }
  func convertStartTimeEndTimeString(dateFormat: EOFoundation.DateFormat) -> Swift.String
}
extension EOFoundation.StartEndTimeDateProtocol {
  public func convertStartTimeEndTimeString(dateFormat: EOFoundation.DateFormat) -> Swift.String
}
public struct EOContactBoxModel {
  public init(buttons: [EOFoundation.EOContactBoxButton], iconTextModels: [EOFoundation.IconTextModel])
  public init(buttons: [EOFoundation.EOContactBoxButton], startEndTimes: [EOFoundation.StartEndTimeDateProtocol])
}
public enum EOContactBoxButtonType {
  case phoneNumber(Swift.String)
  case email(Swift.String)
  case website(Swift.String)
  case navigation(CoreLocation.CLLocationCoordinate2D)
}
public struct EOContactBoxButton {
  public init(type: EOFoundation.EOContactBoxButtonType, title: Swift.String?)
}
@objc @_Concurrency.MainActor(unsafe) public class EODetailViewContactBox : EOFoundation.EODetailViewInformationBox {
  @_Concurrency.MainActor(unsafe) public init(locationTitle: Swift.String?, model: EOFoundation.EOContactBoxModel)
  @_Concurrency.MainActor(unsafe) public init(model: EOFoundation.EOContactBoxModel)
  @objc deinit
}
extension EOFoundation.EODetailViewContactBox : MessageUI.MFMailComposeViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mailComposeController(_ controller: MessageUI.MFMailComposeViewController, didFinishWith result: MessageUI.MFMailComposeResult, error: Swift.Error?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BasicGalleryTile : EOFoundation.WidgetCollectionCellType {
  @_Concurrency.MainActor(unsafe) public static var implementationType: EOFoundation.CellImplementationType
  @_Concurrency.MainActor(unsafe) open var cellsForRegistration: [UIKit.UICollectionViewCell.Type] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var numberOfItems: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) public var widgetOpenHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var cellConfiguration: ((UIKit.UICollectionView, Foundation.IndexPath) -> UIKit.UICollectionViewCell)?
  @_Concurrency.MainActor(unsafe) public var cellSelection: ((Foundation.IndexPath) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setup(with widget: EOFoundation.WidgetModel)
  @_Concurrency.MainActor(unsafe) public func reload()
  @objc deinit
}
extension EOFoundation.BasicGalleryTile : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension EOFoundation.BasicGalleryTile : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BasicGalleryTileCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) final public let imageView: EOFoundation.EOImageView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: EOFoundation.EOBodyLabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct FilterManager {
  public static var shared: EOFoundation.FilterManager
  public var filterDelegate: EOFoundation.FilterProtocol?
  public var dateFilterDelegate: EOFoundation.DateFilterProtocol?
  public var categoryCellHeight: CoreGraphics.CGFloat
  public var filterHeight: CoreGraphics.CGFloat {
    get
  }
  public var categories: [(name: Swift.String, isSelected: Swift.Bool)]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ImageTile : EOFoundation.WidgetCollectionCellType {
  @_Concurrency.MainActor(unsafe) public static var implementationType: EOFoundation.CellImplementationType
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @objc required dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setup(with widget: EOFoundation.WidgetModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ContentTableView : UIKit.UIView, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) public var widget: EOFoundation.WidgetModel?
  @_Concurrency.MainActor(unsafe) final public let titleBg: EOFoundation.GradientOpacView
  @_Concurrency.MainActor(unsafe) final public let titleView: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let subTitleView: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open var mainMedia: EOFoundation.MediaView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let contentTable: EOFoundation.ClearedBackgroundTableView
  @_Concurrency.MainActor(unsafe) public var contentList: [EOFoundation.ContentObject]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titleContentObject: EOFoundation.ContentObject? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func register(_ cellClass: Swift.AnyClass?, forCellReuseIdentifier identifier: Swift.String)
  @_Concurrency.MainActor(unsafe) public func reloadData()
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
public enum PlacesError : Swift.Error {
  case lookUpPhotosIsNotImplemented
  case autocompleteQueryIsNotImplemented
  case lookUpPlaceIsNotImplemented
  case lookUpAddressIsNotImplemented
  public static func == (a: EOFoundation.PlacesError, b: EOFoundation.PlacesError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PlacesProtocol {
  static func requestAuthorization()
  static func loadPhotos(for placeID: Swift.String, completion: @escaping (Swift.Error?, [EOFoundation.Places.Model.PlaceImage]) -> Swift.Void)
  typealias FirstPhotoCompletion = (_ error: Swift.Error?, _ success: (attribution: Foundation.NSAttributedString?, photo: UIKit.UIImage?)) -> Swift.Void
  static func loadFirstPhoto(for placeID: Swift.String, completion: @escaping Self.FirstPhotoCompletion)
  static func loadNearByPlaces(searchQuery: EOFoundation.Places.Model.Search.SearchQuery, queryType: EOFoundation.Places.Model.Search.QueryDataType, completion: @escaping (Swift.Error?, EOFoundation.Places.Model.Search.ResponseMapper?) -> Swift.Void)
  static func autocompleteQuery(searchKey: Swift.String, filterType: EOFoundation.Places.Model.AutocompleteFilter, country: Swift.String, coordinateBounds: EOFoundation.Places.Model.CoordinateBounds?, completion: @escaping (Swift.Error?, [EOFoundation.Places.Model.AutocompletePrediction]) -> Swift.Void)
  static func lookUpPlace(placeID: Swift.String, completion: @escaping (Swift.Error?, EOFoundation.Places.Model.Place?) -> Swift.Void)
  static func lookUpAddress(coordinates: CoreLocation.CLLocationCoordinate2D, completion: @escaping ([EOFoundation.Places.Model.Address], Swift.Error?) -> Swift.Void)
}
extension EOFoundation.PlacesProtocol {
  public static func requestAuthorization()
  public static func loadPhotos(for placeID: Swift.String, completion: @escaping (Swift.Error?, [EOFoundation.Places.Model.PlaceImage]) -> Swift.Void)
  public static func loadFirstPhoto(for placeID: Swift.String, completion: @escaping Self.FirstPhotoCompletion)
  public static func loadNearByPlaces(searchQuery: EOFoundation.Places.Model.Search.SearchQuery, queryType: EOFoundation.Places.Model.Search.QueryDataType = .all, completion: @escaping (Swift.Error?, EOFoundation.Places.Model.Search.ResponseMapper?) -> Swift.Void)
  public static func autocompleteQuery(searchKey: Swift.String, filterType: EOFoundation.Places.Model.AutocompleteFilter = .noFilter, country: Swift.String = "DE", coordinateBounds: EOFoundation.Places.Model.CoordinateBounds? = nil, completion: @escaping (Swift.Error?, [EOFoundation.Places.Model.AutocompletePrediction]) -> Swift.Void)
  public static func lookUpPlace(placeID: Swift.String, completion: @escaping (Swift.Error?, EOFoundation.Places.Model.Place?) -> Swift.Void)
  public static func lookUpAddress(coordinates: CoreLocation.CLLocationCoordinate2D, completion: @escaping ([EOFoundation.Places.Model.Address], Swift.Error?) -> Swift.Void)
}
@_inheritsConvenienceInitializers @objc open class GoogleAutocompleteModel : ObjectiveC.NSObject {
  @objc open var placeID: Swift.String?
  @objc open var attributedFullTextString: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class GoogleAddressModel : ObjectiveC.NSObject {
  @objc open var houseNumber: Swift.String?
  @objc open var street: Swift.String?
  @objc open var city: Swift.String?
  @objc open var zip: Swift.String?
  @objc open var latitude: Swift.String?
  @objc open var longitude: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public struct EOOpeningTimes {
  public init(title: Swift.String, subtitle: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EOOpeningTimesDetailedView : EOFoundation.EOView, EOFoundation.EODetailViewBoxProtocol {
  @_Concurrency.MainActor(unsafe) public var hasBackground: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, daysOfTheWeek: [EOFoundation.EOOpeningTimes])
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, daysOfTheWeek: [EOFoundation.EOOpeningTimes], simpleLayout: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BasicWidgetViewControllerType : EOFoundation.WidgetViewControllerType {
  @_Concurrency.MainActor(unsafe) public static var implementationType: EOFoundation.ControllerImplementationType
  @_Concurrency.MainActor(unsafe) public var navigationType: EOFoundation.ControllerNavigationType
  @_Concurrency.MainActor(unsafe) public var widget: EOFoundation.WidgetModel?
  @_Concurrency.MainActor(unsafe) public func setup(with widget: EOFoundation.WidgetModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol ListSmallImageTableViewCellProtocol {
  var headline: Swift.String { get set }
  var subline: Swift.String { get set }
  var detailSmall: Swift.String { get set }
  var image: EOFoundation.MediaContentType { get set }
}
public struct ListSmallImageTableViewCellModel : EOFoundation.ListSmallImageTableViewCellProtocol {
  public var headline: Swift.String
  public var subline: Swift.String
  public var detailSmall: Swift.String
  public var image: EOFoundation.MediaContentType
  public init(headline: Swift.String, subline: Swift.String, detailSmall: Swift.String, image: EOFoundation.MediaContentType)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ListSmallImageTableViewCell : UIKit.UITableViewCell {
  @objc deinit
}
extension EOFoundation.ListSmallImageTableViewCell {
  @_Concurrency.MainActor(unsafe) public func fill(with modelProtocol: EOFoundation.ListSmallImageTableViewCellProtocol)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class WidgetCollectionView : EOFoundation.ClearedBackgroundCollection, UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) public var widgets: [EOFoundation.WidgetModel] {
    get
    set
  }
  @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @_Concurrency.MainActor(unsafe) public func registerWidgets()
  @_Concurrency.MainActor(unsafe) public func dequeReusableWidget(for indexPath: Foundation.IndexPath, widget: EOFoundation.WidgetModel) -> EOFoundation.WidgetCollectionCellType
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func willAppear()
  @_Concurrency.MainActor(unsafe) public func willDisappear()
  @objc deinit
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func top(equalTo anchor: UIKit.NSLayoutYAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func top(greaterThanOrEqualTo anchor: UIKit.NSLayoutYAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func top(lessThanOrEqualTo anchor: UIKit.NSLayoutYAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leading(equalTo anchor: UIKit.NSLayoutXAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leading(greaterThanOrEqualTo anchor: UIKit.NSLayoutXAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leading(lessThanOrEqualTo anchor: UIKit.NSLayoutXAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func bottom(equalTo anchor: UIKit.NSLayoutYAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func bottom(greaterThanOrEqualTo anchor: UIKit.NSLayoutYAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func bottom(lessThanOrEqualTo anchor: UIKit.NSLayoutYAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func trailing(equalTo anchor: UIKit.NSLayoutXAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func trailing(greaterThanOrEqualTo anchor: UIKit.NSLayoutXAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func trailing(lessThanOrEqualTo anchor: UIKit.NSLayoutXAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(equalTo anchor: UIKit.NSLayoutDimension, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(greaterThanOrEqualTo anchor: UIKit.NSLayoutDimension, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(lessThanOrEqualTo anchor: UIKit.NSLayoutDimension, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(equalTo constant: CoreGraphics.CGFloat, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(greaterThanOrEqualTo constant: CoreGraphics.CGFloat, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(lessThanOrEqualTo constant: CoreGraphics.CGFloat, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(equalTo anchor: UIKit.NSLayoutDimension, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(greaterThanOrEqualTo anchor: UIKit.NSLayoutDimension, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(lessThanOrEqualTo anchor: UIKit.NSLayoutDimension, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(equalTo constant: CoreGraphics.CGFloat, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(greaterThanOrEqualTo constant: CoreGraphics.CGFloat, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(lessThanOrEqualTo constant: CoreGraphics.CGFloat, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerX(equalTo anchor: UIKit.NSLayoutXAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerX(greaterThanOrEqualTo anchor: UIKit.NSLayoutXAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerX(lessThanOrEqualTo anchor: UIKit.NSLayoutXAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerY(equalTo anchor: UIKit.NSLayoutYAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerY(greaterThanOrEqualTo anchor: UIKit.NSLayoutYAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerY(lessThanOrEqualTo anchor: UIKit.NSLayoutYAxisAnchor, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func top(equalTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func top(greaterThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func top(lessThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leading(equalTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leading(greaterThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leading(lessThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func bottom(equalTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func bottom(greaterThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func bottom(lessThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func trailing(equalTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func trailing(greaterThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func trailing(lessThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(equalTo view: UIKit.UIView, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(greaterThanOrEqualTo view: UIKit.UIView, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(lessThanOrEqualTo view: UIKit.UIView, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(equalTo view: UIKit.UIView, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(greaterThanOrEqualTo view: UIKit.UIView, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(lessThanOrEqualTo view: UIKit.UIView, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerX(equalTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerX(greaterThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerX(lessThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerY(equalTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerY(greaterThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerY(lessThanOrEqualTo view: UIKit.UIView, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func top(equalTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func top(greaterThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func top(lessThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leading(equalTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leading(greaterThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func leading(lessThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func bottom(equalTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func bottom(greaterThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func bottom(lessThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func trailing(equalTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func trailing(greaterThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func trailing(lessThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(equalTo layoutGuide: UIKit.UILayoutGuide, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(greaterThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func width(lessThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(equalTo layoutGuide: UIKit.UILayoutGuide, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(greaterThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func height(lessThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, multiplier: CoreGraphics.CGFloat = 1, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerX(equalTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerX(greaterThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerX(lessThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerY(equalTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerY(greaterThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func centerY(lessThanOrEqualTo layoutGuide: UIKit.UILayoutGuide, constant: CoreGraphics.CGFloat = 0, priority: UIKit.UILayoutPriority = .required) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func add(subview: UIKit.UIView) -> UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func fill(top topAnchor: UIKit.NSLayoutYAxisAnchor, leading leadingAnchor: UIKit.NSLayoutXAxisAnchor, bottom bottomAnchor: UIKit.NSLayoutYAxisAnchor, trailing trailingAnchor: UIKit.NSLayoutXAxisAnchor, offsets: UIKit.UIEdgeInsets) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func fill(top: UIKit.NSLayoutYAxisAnchor, leading: UIKit.NSLayoutXAxisAnchor, bottom: UIKit.NSLayoutYAxisAnchor, trailing: UIKit.NSLayoutXAxisAnchor, offset: CoreGraphics.CGFloat = 0) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func fill(inside view: UIKit.UIView, offsets: UIKit.UIEdgeInsets) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func fill(inside view: UIKit.UIView, offset: CoreGraphics.CGFloat = 0) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func fill(inside layouGuide: UIKit.UILayoutGuide, offsets: UIKit.UIEdgeInsets) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func fill(inside layoutGuide: UIKit.UILayoutGuide, offset: CoreGraphics.CGFloat = 0) -> Self
  @_Concurrency.MainActor(unsafe) public func wrap(view: UIKit.UIView, offset: CoreGraphics.CGFloat = 0, toBottom: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func wrap(view: UIKit.UIView, verticalOffset: CoreGraphics.CGFloat = 0, horizontalOffset: CoreGraphics.CGFloat = 0, toBottom: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func center(view: UIKit.UIView, factor: CoreGraphics.CGFloat = 1)
  @_Concurrency.MainActor(unsafe) public func center(view: UIKit.UIView, with size: CoreGraphics.CGSize)
  @_Concurrency.MainActor(unsafe) public func center(view: UIKit.UIView, heightFactor: CoreGraphics.CGFloat = 1, widthFactor: CoreGraphics.CGFloat = 1)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func size(_ size: CoreGraphics.CGSize) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func size(square: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func aspect(ratio: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func aspect(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func square() -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func center(inside view: UIKit.UIView) -> Self
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func center(inside layoutGuide: UIKit.UILayoutGuide) -> Self
  @_Concurrency.MainActor(unsafe) public var asImage: UIKit.UIImage {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addTileBorder()
  @_Concurrency.MainActor(unsafe) public func addDarkShadow()
  @_Concurrency.MainActor(unsafe) public func startLoadingAnimation(with style: UIKit.UIActivityIndicatorView.Style = .large)
  @_Concurrency.MainActor(unsafe) public func stopLoadingAnimation()
  @_Concurrency.MainActor(unsafe) public func addGradientBackground()
  @_Concurrency.MainActor(unsafe) public func screenshot() -> UIKit.UIImage
  @_Concurrency.MainActor(unsafe) public func fadeOut(with duration: Swift.Double = 0.3, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func fadeIn(with duration: Swift.Double = 0.3, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func slideUp(with duration: Swift.Double = 0.3, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func slideDown(with duration: Swift.Double = 0.3, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showBlurLoader()
  @_Concurrency.MainActor(unsafe) public func removeBluerLoader()
  @_Concurrency.MainActor(unsafe) public var convertToImage: UIKit.UIImage {
    get
  }
  @_Concurrency.MainActor(unsafe) public func addGradientBorder(width: CoreGraphics.CGFloat, colors: [UIKit.UIColor], cornerRadius: CoreGraphics.CGFloat)
}
@objc public class AtomFeedParser : ObjectiveC.NSObject, EOFoundation.FeedParserProtocol {
  public struct Item : EOFoundation.AtomFeedObject {
    public var title: Swift.String
    public var link: Swift.String
    public var author: EOFoundation.AtomAuthor?
    public var entry: EOFoundation.AtomEntry?
  }
  public enum Keys : Swift.String {
    case feed
    case author
    case entry
    case title
    case link
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var configuration: EOFoundation.NewsServiceConfig?
  public var lastLoad: Foundation.Date
  public var url: Swift.String
  public var feeds: [EOFoundation.NewsFeedModel]
  public var completion: (EOFoundation.FeedResultType) -> Swift.Void
  public var xmlParser: Foundation.XMLParser
  public var currentItem: EOFoundation.AtomFeedParser.Item
  public var currentElement: EOFoundation.AtomFeedParser.Keys
  public init(data: Foundation.Data, url: Swift.String, completion: @escaping (EOFoundation.FeedResultType) -> Swift.Void)
  @objc deinit
}
extension EOFoundation.AtomFeedParser : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parserDidEndDocument(_ parser: Foundation.XMLParser)
}
public protocol PDFURLProvider {
  var pdfData: Foundation.Data? { get }
  var pdfURL: Swift.String? { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class EOImageFullScreenController : EOFoundation.WidgetViewControllerType {
  @_Concurrency.MainActor(unsafe) public static var implementationType: EOFoundation.ControllerImplementationType
  @_Concurrency.MainActor(unsafe) public var widget: EOFoundation.WidgetModel?
  @_Concurrency.MainActor(unsafe) public var currentIndex: Foundation.IndexPath {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var imageUrls: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var images: [UIKit.UIImage] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var imageLink: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var navigationType: EOFoundation.ControllerNavigationType
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) open func setup(with widget: EOFoundation.WidgetModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension EOFoundation.EOImageFullScreenController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension EOFoundation.EOImageFullScreenController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class EOSafariViewController : SafariServices.SFSafariViewController {
  @available(iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(url URL: Foundation.URL, configuration: SafariServices.SFSafariViewController.Configuration)
  @available(iOS, introduced: 9.0, deprecated: 11.0)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(url URL: Foundation.URL, entersReaderIfAvailable: Swift.Bool)
  @objc deinit
}
extension Foundation.IndexPath {
  public static let zero: Foundation.IndexPath
}
@objc @_Concurrency.MainActor(unsafe) open class OneMapViewController : EOFoundation.EOViewController {
  @_Concurrency.MainActor(unsafe) final public let mapView: MapKit.MKMapView
  @_Concurrency.MainActor(unsafe) public var objects: [EOFoundation.DetailedViewObject]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(isClustreable: Swift.Bool, annotationImage: EOFoundation.MediaContentType?, locationButtonImage: EOFoundation.MediaContentType?, mapTypeButtonImage: EOFoundation.MediaContentType?, directionButtonImage: EOFoundation.MediaContentType?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension EOFoundation.OneMapViewController : MapKit.MKMapViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapViewDidFinishLoadingMap(_ mapView: MapKit.MKMapView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, didSelect view: MapKit.MKAnnotationView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, regionDidChangeAnimated animated: Swift.Bool)
}
extension EOFoundation.OneMapViewController : CoreLocation.CLLocationManagerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
extension EOFoundation.OneMapViewController : EOFoundation.EOSocialMediaDelegate, EOFoundation.EOGalleryItemsViewDelegate {
  @_Concurrency.MainActor(unsafe) public func didSelectListItemAtIndexPath(indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) public func didSelectGalleryItemModel(model: EOFoundation.MediaModel)
}
extension EOFoundation.SettingsProtocol {
  public static func save(with id: Swift.Int, value: EOFoundation.SettingType)
  public static func loadSettings<T>(for id: Swift.Int, with type: T.Type, completion: (T?) -> Swift.Void) where T : EOFoundation.SettingType
  public static func loadStore()
  public static func cacheStore()
}
public struct AtomAuthor {
  public enum Keys : Swift.String {
    case name
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var name: Swift.String
  public init(dict: [Swift.String : Swift.String])
}
public struct AtomEntry {
  public enum Keys : Swift.String {
    case title
    case link
    case id
    case updated
    case summary
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var title: Swift.String
  public var link: Swift.String
  public var id: Swift.String
  public var updated: Swift.String
  public var summary: Swift.String
  public init(dict: [Swift.String : Swift.String])
}
public protocol AtomFeedObject : EOFoundation.NewsFeedModel {
  var title: Swift.String { get set }
  var author: EOFoundation.AtomAuthor? { get set }
  var entry: EOFoundation.AtomEntry? { get set }
}
public protocol ListSmallTableViewCellProtocol {
  var headline: Swift.String { get set }
  var subline: Swift.String { get set }
  var detailSmall: Swift.String? { get set }
  var detailBig: Swift.String? { get set }
  var helperTextTop: Swift.String? { get set }
  var helperTextBottom: Swift.String? { get set }
}
public struct ListSmallTableViewCellModel : EOFoundation.ListSmallTableViewCellProtocol {
  public var headline: Swift.String
  public var subline: Swift.String
  public var detailSmall: Swift.String?
  public var detailBig: Swift.String?
  public var helperTextTop: Swift.String?
  public var helperTextBottom: Swift.String?
  public init(headline: Swift.String, subline: Swift.String, detailSmall: Swift.String?, detailBig: Swift.String?, helperTextTop: Swift.String?, helperTextBottom: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ListSmallTableViewCell : UIKit.UITableViewCell {
  @objc deinit
}
extension EOFoundation.ListSmallTableViewCell {
  @_Concurrency.MainActor(unsafe) public func fill(with modelProtocol: EOFoundation.ListSmallTableViewCellProtocol)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class GradientOpacView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) public func apply(colors: [Swift.String]?)
  @_Concurrency.MainActor(unsafe) public func apply(colors: [UIKit.UIColor])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BluredView : EOFoundation.GradientOpacView {
  @_Concurrency.MainActor(unsafe) public var blurEffect: UIKit.UIVisualEffectView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class GradientTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) public func apply(colors: [UIKit.UIColor])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var text: Swift.String! {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TitledListCell : EOFoundation.BaseContentCell {
  @_Concurrency.MainActor(unsafe) final public let titleLab: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let detailsContent: EOFoundation.GradientOpacView
  @_Concurrency.MainActor(unsafe) final public let detailedListTableView: EOFoundation.DetailedListTableView
  @_Concurrency.MainActor(unsafe) open var object: EOFoundation.ContentObject? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func layout()
  @_Concurrency.MainActor(unsafe) public func didClickCell()
  @objc deinit
}
extension UIKit.UIImage {
  convenience public init?(color: UIKit.UIColor, size: CoreGraphics.CGSize = CGSize(width: 1, height: 1))
  @available(*, deprecated, message: "use init?(systemName: String)")
  convenience public init?(systemName: Swift.String, or name: Swift.String, bundle: Foundation.Bundle? = nil)
  public static func filled(with color: UIKit.UIColor) -> UIKit.UIImage
  public func resize(to targetSize: CoreGraphics.CGSize) -> UIKit.UIImage?
  public func addInnerInset(_ inset: CoreGraphics.CGFloat) -> UIKit.UIImage
  public func addInnerInsets(_ insets: UIKit.UIEdgeInsets) -> UIKit.UIImage
  public func imageWithInsets(insetDimen: CoreGraphics.CGFloat) -> UIKit.UIImage
  public func imageWithInset(insets: UIKit.UIEdgeInsets) -> UIKit.UIImage
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ClusterAnnotationView : MapKit.MKMarkerAnnotationView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var annotation: MapKit.MKAnnotation? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(annotation: MapKit.MKAnnotation?, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MapPickerAnnotationView : MapKit.MKMarkerAnnotationView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var annotation: MapKit.MKAnnotation? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(annotation: MapKit.MKAnnotation?, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc open class MapPickerAnnotation : ObjectiveC.NSObject, MapKit.MKAnnotation {
  @objc open var coordinate: CoreLocation.CLLocationCoordinate2D
  open var object: EOFoundation.ContentProtocol
  @objc open var title: Swift.String? {
    @objc get
  }
  public init(object: EOFoundation.ContentProtocol)
  @objc deinit
}
@objc open class MapPickerDetailedViewAnnotation : ObjectiveC.NSObject, MapKit.MKAnnotation {
  @objc open var coordinate: CoreLocation.CLLocationCoordinate2D
  open var object: EOFoundation.DetailedViewObject
  @objc open var title: Swift.String? {
    @objc get
  }
  public init(object: EOFoundation.DetailedViewObject)
  @objc deinit
}
public func configure<T>(_ value: T, using closure: (inout T) throws -> Swift.Void) rethrows -> T
public enum Url : Swift.String {
  case appConfig
  case login
  case signup
  case registerdevice
  case logout
  case forgetPassword
  case changePassword
  case validateUser
  case saveUserSettings
  case loadUserSettings
  case session
  case user
  case profile
  public var value: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UrlV2 {
  case appConfig(version: Swift.Int = 1)
  public var value: Swift.String {
    get
  }
}
public func print(_ items: Any)
public func print(_ string: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column)
public struct AnalyticsManager {
  public static var userConsentsToAnalytics: Swift.Bool
  public static func trackAnalytics(_ track: Swift.Bool)
  public static func trackCategories(_ arrayOfCategories: [[Swift.String : Swift.String]])
}
public protocol EditableTextFieldDelegate : AnyObject {
  func didPick(text: Swift.String?)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EditableTextField : UIKit.UITextField, UIKit.UITextFieldDelegate, EOFoundation.EditableTextFieldDelegate {
  @_Concurrency.MainActor(unsafe) final public let finder: EOFoundation.EditableTextField.Editor
  @_Concurrency.MainActor(unsafe) weak final public var validator: EOFoundation.EditableTextFieldDelegate?
  @_Concurrency.MainActor(unsafe) public init(validator: EOFoundation.EditableTextFieldDelegate? = nil)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) final public func didPick(text: Swift.String?)
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class Editor : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) final public let searchField: UIKit.UITextField
    @objc deinit
  }
  @objc deinit
}
public class JSONAny : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class JSONNull : Swift.Codable {
  public static func == (lhs: EOFoundation.JSONNull, rhs: EOFoundation.JSONNull) -> Swift.Bool
  public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class JSONCodingKey : Swift.CodingKey {
  final public let key: Swift.String
  required public init?(intValue: Swift.Int)
  required public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) convenience public init(style: EOFoundation.TextStyleType)
  @_Concurrency.MainActor(unsafe) public func textHeight(withWidth width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) public var wrappedText: Swift.String {
    get
  }
}
extension Swift.String {
  public func height(withWidth width: CoreGraphics.CGFloat, font: UIKit.UIFont) -> CoreGraphics.CGFloat
}
extension Foundation.NSAttributedString {
  public func height(withWidth width: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
}
public struct MainService {
}
public struct NewsArticle : EOFoundation.ContentHubObjectProtocol, EOFoundation.NewsFeedModel {
  public var socialMedia: [EOFoundation.SocialMediaModel]?
  public var additionalMedia: [EOFoundation.MediaModel]?
  public let id: Swift.Int64
  public let subTitle: Swift.String?
  public let logo: Swift.String?
  public var additionalImages: [EOFoundation.AdditionalImage]?
  public let widgetCoreType: Swift.String
  public let newseDescription: Swift.String?
  public let mainMedia: EOFoundation.MediaModel?
  public let widgetId: Swift.Int64
  public let category: EOFoundation.Category?
  public let name: Swift.String
  public let creationTime: Swift.Double
  public var link: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Category : Swift.Codable {
  public let id: Swift.Int64
  public let name: Swift.String
  public let widgetCoreType: Swift.String
  public let widgetId: Swift.Int64
  public let subTitle: Swift.String
  public let icon: Swift.String
  public let image: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension EOFoundation.NewsArticle : EOFoundation.ContentProtocol {
  public func getContent() -> [EOFoundation.ContentObject]
  public func getLocation() -> CoreLocation.CLLocationCoordinate2D?
  public func getTitle() -> Swift.String
}
public protocol DeepLinker {
  static func handle(url: Foundation.URL) -> Swift.Bool
  static func openWidget(with infos: [Swift.AnyHashable : Any]) -> Swift.Bool
  static func openWidget(with id: Swift.String)
}
public enum DeepLink : Swift.String {
  case widget
  case url
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension EOFoundation.DeepLinker {
  public static func handle(url: Foundation.URL) -> Swift.Bool
  public static func linkApp(to link: EOFoundation.DeepLink, conponents: Foundation.URLComponents) -> Swift.Bool
  public static func openWidget(with infos: [Swift.AnyHashable : Any]) -> Swift.Bool
  public static func openContentInWidget(widgetId: Swift.String, contentId: Swift.String)
  public static func openWidget(with id: Swift.String)
  public static func open(core: UIKit.UIViewController, for widget: EOFoundation.WidgetModel)
}
public struct DeepLinkingManager : EOFoundation.DeepLinker {
  public static var openContentItemWithId: Swift.String?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class EOContentSizedTableView : UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var contentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class EODetailViewListBox : EOFoundation.EOView, EOFoundation.EODetailViewBoxProtocol {
  @_Concurrency.MainActor(unsafe) public var tableView: EOFoundation.EOContentSizedTableView
  @_Concurrency.MainActor(unsafe) public var hasBackground: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var dataSource: UIKit.UITableViewDataSource? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String)
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, dataSource: UIKit.UITableViewDataSource)
  @objc deinit
}
public protocol FeedParserProtocol {
  var feeds: [EOFoundation.NewsFeedModel] { get set }
  var url: Swift.String { get set }
  var lastLoad: Foundation.Date { get set }
  var configuration: EOFoundation.NewsServiceConfig? { get set }
}
@objc @_hasMissingDesignatedInitializers public class RssFeedParser : ObjectiveC.NSObject, EOFoundation.FeedParserProtocol {
  public struct Item : EOFoundation.RssFeedObject {
    public var title: Swift.String
    public var link: Swift.String
    public var description: Swift.String
    public var pubDate: Swift.String
    public var guid: Swift.String
    public var imageUrl: Swift.String
  }
  public enum Keys : Swift.String {
    case item
    case enclosure
    case url
    case title
    case link
    case description
    case pubDate
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var configuration: EOFoundation.NewsServiceConfig?
  public var lastLoad: Foundation.Date
  public var url: Swift.String
  public var feeds: [EOFoundation.NewsFeedModel]
  public var completion: (EOFoundation.FeedResultType) -> Swift.Void
  public var xmlParser: Foundation.XMLParser
  public var currentItem: EOFoundation.RssFeedParser.Item
  public var currentElement: EOFoundation.RssFeedParser.Keys
  public var currentParsedString: Swift.String
  @objc deinit
}
extension EOFoundation.RssFeedParser : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCDATA CDATABlock: Foundation.Data)
  @objc dynamic public func parserDidEndDocument(_ parser: Foundation.XMLParser)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class EODetailViewListBoxCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var leftImageView: EOFoundation.EOImageView
  @_Concurrency.MainActor(unsafe) public var titleLabel: EOFoundation.EOBodyLabel
  @_Concurrency.MainActor(unsafe) public var subtitleLabel: EOFoundation.EONoteLabel
  @_Concurrency.MainActor(unsafe) public var separator: UIKit.UIView
  @_Concurrency.MainActor(unsafe) public var isShowingSeparator: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol MapPickerDelegate : AnyObject {
  func didSelect(_ view: MapKit.MKAnnotationView, _ mapView: MapKit.MKMapView)
  func regionDidChangeAnimated(_ mapView: MapKit.MKMapView, animated: Swift.Bool)
}
extension EOFoundation.MapPickerDelegate {
  public func didSelect(_ view: MapKit.MKAnnotationView, _ mapView: MapKit.MKMapView)
  public func regionDidChangeAnimated(_ mapView: MapKit.MKMapView, animated: Swift.Bool)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MapPickerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var widget: EOFoundation.WidgetModel?
  @_Concurrency.MainActor(unsafe) weak public var pickerDelegate: EOFoundation.MapPickerDelegate?
  @_Concurrency.MainActor(unsafe) public var objects: [EOFoundation.ContentProtocol]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(isClustreable: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public init(isClustreable: Swift.Bool = false, annotationImage: EOFoundation.MediaContentType?, locationButtonImage: EOFoundation.MediaContentType?, mapTypeButtonImage: EOFoundation.MediaContentType?, directionButtonImage: EOFoundation.MediaContentType?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension EOFoundation.MapPickerViewController : MapKit.MKMapViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapViewDidFinishLoadingMap(_ mapView: MapKit.MKMapView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, didSelect view: MapKit.MKAnnotationView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, didDeselect view: MapKit.MKAnnotationView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, annotationView view: MapKit.MKAnnotationView, calloutAccessoryControlTapped control: UIKit.UIControl)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, regionDidChangeAnimated animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MapKit.MKMapView, viewFor annotation: MapKit.MKAnnotation) -> MapKit.MKAnnotationView?
}
extension EOFoundation.MapPickerViewController : CoreLocation.CLLocationManagerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
public protocol Highlightable {
  var isHighlightable: Swift.Bool { get }
  func setIsHighlighted(_ isHighlighted: Swift.Bool)
}
extension EOFoundation.Highlightable where Self : UIKit.UIView {
  public var isHighlightable: Swift.Bool {
    get
  }
  public func setIsHighlighted(_ isHighlighted: Swift.Bool)
}
extension EOFoundation.Reachability.Connection : Swift.Equatable {}
extension EOFoundation.Reachability.Connection : Swift.Hashable {}
extension EOFoundation.Reachability.Connection : Swift.RawRepresentable {}
extension EOFoundation.OGMetadata : Swift.Equatable {}
extension EOFoundation.OGMetadata : Swift.Hashable {}
extension EOFoundation.OGMetadata : Swift.RawRepresentable {}
extension EOFoundation.CellImplementationType : Swift.Equatable {}
extension EOFoundation.CellImplementationType : Swift.Hashable {}
extension EOFoundation.ControllerNavigationType : Swift.Equatable {}
extension EOFoundation.ControllerNavigationType : Swift.Hashable {}
extension EOFoundation.EOFoundationKeys : Swift.Equatable {}
extension EOFoundation.EOFoundationKeys : Swift.Hashable {}
extension EOFoundation.EOFoundationKeys : Swift.RawRepresentable {}
extension EOFoundation.Session.EmailResetState : Swift.Equatable {}
extension EOFoundation.Session.EmailResetState : Swift.Hashable {}
extension EOFoundation.FileType : Swift.Equatable {}
extension EOFoundation.FileType : Swift.Hashable {}
extension EOFoundation.FileType : Swift.RawRepresentable {}
extension EOFoundation.FloatActionButtonState : Swift.Equatable {}
extension EOFoundation.FloatActionButtonState : Swift.Hashable {}
extension EOFoundation.DateFormat : Swift.Equatable {}
extension EOFoundation.DateFormat : Swift.Hashable {}
extension EOFoundation.DateFormat : Swift.RawRepresentable {}
extension EOFoundation.Environment : Swift.Equatable {}
extension EOFoundation.Environment : Swift.Hashable {}
extension EOFoundation.Environment : Swift.RawRepresentable {}
extension EOFoundation.Configurations.Configuration : Swift.Equatable {}
extension EOFoundation.Configurations.Configuration : Swift.Hashable {}
extension EOFoundation.Configurations.Configuration : Swift.RawRepresentable {}
extension EOFoundation.Places.Model.AutocompleteFilter : Swift.Equatable {}
extension EOFoundation.Places.Model.AutocompleteFilter : Swift.Hashable {}
extension EOFoundation.Places.Model.AutocompleteFilter : Swift.RawRepresentable {}
extension EOFoundation.Places.Model.DistanceResponse.CodingKeys : Swift.Equatable {}
extension EOFoundation.Places.Model.DistanceResponse.CodingKeys : Swift.Hashable {}
extension EOFoundation.Places.Model.DistanceResponse.CodingKeys : Swift.RawRepresentable {}
extension EOFoundation.WidgetModel.Keys : Swift.Equatable {}
extension EOFoundation.WidgetModel.Keys : Swift.Hashable {}
extension EOFoundation.WidgetModel.Keys : Swift.RawRepresentable {}
extension EOFoundation.FeedType : Swift.Equatable {}
extension EOFoundation.FeedType : Swift.Hashable {}
extension EOFoundation.FeedType : Swift.RawRepresentable {}
extension EOFoundation.TextFieldType : Swift.Equatable {}
extension EOFoundation.TextFieldType : Swift.Hashable {}
extension EOFoundation.QrCodeType : Swift.Equatable {}
extension EOFoundation.QrCodeType : Swift.Hashable {}
extension EOFoundation.QrCodeType : Swift.RawRepresentable {}
extension EOFoundation.ContentType : Swift.Equatable {}
extension EOFoundation.ContentType : Swift.Hashable {}
extension EOFoundation.ContentType : Swift.RawRepresentable {}
extension EOFoundation.ContactType : Swift.Equatable {}
extension EOFoundation.ContactType : Swift.Hashable {}
extension EOFoundation.ContactType : Swift.RawRepresentable {}
extension EOFoundation.ButtonState : Swift.Equatable {}
extension EOFoundation.ButtonState : Swift.Hashable {}
extension EOFoundation.ButtonStateType : Swift.Equatable {}
extension EOFoundation.ButtonStateType : Swift.Hashable {}
extension EOFoundation.TextStyleType : Swift.Equatable {}
extension EOFoundation.TextStyleType : Swift.Hashable {}
extension EOFoundation.TextStyleType : Swift.RawRepresentable {}
extension EOFoundation.GlobalConfigs.Strings : Swift.Equatable {}
extension EOFoundation.GlobalConfigs.Strings : Swift.Hashable {}
extension EOFoundation.GlobalConfigs.Strings : Swift.RawRepresentable {}
extension EOFoundation.GlobalConfigs.Objects : Swift.Equatable {}
extension EOFoundation.GlobalConfigs.Objects : Swift.Hashable {}
extension EOFoundation.GlobalConfigs.Objects : Swift.RawRepresentable {}
extension EOFoundation.GlobalConfigs.Booleans : Swift.Equatable {}
extension EOFoundation.GlobalConfigs.Booleans : Swift.Hashable {}
extension EOFoundation.GlobalConfigs.Booleans : Swift.RawRepresentable {}
extension EOFoundation.GlobalConfigs.Int : Swift.Equatable {}
extension EOFoundation.GlobalConfigs.Int : Swift.Hashable {}
extension EOFoundation.GlobalConfigs.Int : Swift.RawRepresentable {}
extension EOFoundation.MainServiceResponseMapper.LoginType : Swift.Equatable {}
extension EOFoundation.MainServiceResponseMapper.LoginType : Swift.Hashable {}
extension EOFoundation.MainServiceResponseMapper.LoginType : Swift.RawRepresentable {}
extension EOFoundation.MainServiceResponseMapper.LoginSubtype : Swift.Equatable {}
extension EOFoundation.MainServiceResponseMapper.LoginSubtype : Swift.Hashable {}
extension EOFoundation.MainServiceResponseMapper.LoginSubtype : Swift.RawRepresentable {}
extension EOFoundation.MainServiceResponseMapper.RegisterType : Swift.Equatable {}
extension EOFoundation.MainServiceResponseMapper.RegisterType : Swift.Hashable {}
extension EOFoundation.MainServiceResponseMapper.RegisterType : Swift.RawRepresentable {}
extension EOFoundation.MainServiceResponseMapper.RegisterSubtype : Swift.Equatable {}
extension EOFoundation.MainServiceResponseMapper.RegisterSubtype : Swift.Hashable {}
extension EOFoundation.MainServiceResponseMapper.RegisterSubtype : Swift.RawRepresentable {}
extension EOFoundation.EOButtonState : Swift.Equatable {}
extension EOFoundation.EOButtonState : Swift.Hashable {}
extension EOFoundation.HTTPMethod : Swift.Equatable {}
extension EOFoundation.HTTPMethod : Swift.Hashable {}
extension EOFoundation.HTTPMethod : Swift.RawRepresentable {}
extension EOFoundation.Places.Model.Search.QueryDataType : Swift.Equatable {}
extension EOFoundation.Places.Model.Search.QueryDataType : Swift.Hashable {}
extension EOFoundation.AppIcons : Swift.Equatable {}
extension EOFoundation.AppIcons : Swift.Hashable {}
extension EOFoundation.AppIcons : Swift.RawRepresentable {}
extension EOFoundation.AppIcons.Navigation : Swift.Equatable {}
extension EOFoundation.AppIcons.Navigation : Swift.Hashable {}
extension EOFoundation.AppIcons.Navigation : Swift.RawRepresentable {}
extension EOFoundation.AppIcons.QuickActions : Swift.Equatable {}
extension EOFoundation.AppIcons.QuickActions : Swift.Hashable {}
extension EOFoundation.AppIcons.QuickActions : Swift.RawRepresentable {}
extension EOFoundation.AppIcons.TabBar : Swift.Equatable {}
extension EOFoundation.AppIcons.TabBar : Swift.Hashable {}
extension EOFoundation.AppIcons.TabBar : Swift.RawRepresentable {}
extension EOFoundation.MediaViewType : Swift.Equatable {}
extension EOFoundation.MediaViewType : Swift.Hashable {}
extension EOFoundation.MediaViewType : Swift.RawRepresentable {}
extension EOFoundation.EOBottomSheetDialogButtonStyle : Swift.Equatable {}
extension EOFoundation.EOBottomSheetDialogButtonStyle : Swift.Hashable {}
extension EOFoundation.PermissionType : Swift.Equatable {}
extension EOFoundation.PermissionType : Swift.Hashable {}
extension EOFoundation.PermissionType : Swift.RawRepresentable {}
extension EOFoundation.PlacesError : Swift.Equatable {}
extension EOFoundation.PlacesError : Swift.Hashable {}
extension EOFoundation.AtomFeedParser.Keys : Swift.Equatable {}
extension EOFoundation.AtomFeedParser.Keys : Swift.Hashable {}
extension EOFoundation.AtomFeedParser.Keys : Swift.RawRepresentable {}
extension EOFoundation.AtomAuthor.Keys : Swift.Equatable {}
extension EOFoundation.AtomAuthor.Keys : Swift.Hashable {}
extension EOFoundation.AtomAuthor.Keys : Swift.RawRepresentable {}
extension EOFoundation.AtomEntry.Keys : Swift.Equatable {}
extension EOFoundation.AtomEntry.Keys : Swift.Hashable {}
extension EOFoundation.AtomEntry.Keys : Swift.RawRepresentable {}
extension EOFoundation.Url : Swift.Equatable {}
extension EOFoundation.Url : Swift.Hashable {}
extension EOFoundation.Url : Swift.RawRepresentable {}
extension EOFoundation.DeepLink : Swift.Equatable {}
extension EOFoundation.DeepLink : Swift.Hashable {}
extension EOFoundation.DeepLink : Swift.RawRepresentable {}
extension EOFoundation.RssFeedParser.Keys : Swift.Equatable {}
extension EOFoundation.RssFeedParser.Keys : Swift.Hashable {}
extension EOFoundation.RssFeedParser.Keys : Swift.RawRepresentable {}
